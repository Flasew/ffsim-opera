// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskgraph.proto

#include "taskgraph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_taskgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connection_taskgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_taskgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_taskgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_taskgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Operator_taskgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_taskgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_taskgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_taskgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Route_taskgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_taskgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Task_taskgraph_2eproto;
namespace TaskGraphProtoBuf {
class OperatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Operator> _instance;
} _Operator_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
class DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class ConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Connection> _instance;
} _Connection_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Route> _instance;
} _Route_default_instance_;
class TaskGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskGraph> _instance;
} _TaskGraph_default_instance_;
class TopologyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Topology> _instance;
} _Topology_default_instance_;
}  // namespace TaskGraphProtoBuf
static void InitDefaultsscc_info_Connection_taskgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TaskGraphProtoBuf::_Connection_default_instance_;
    new (ptr) ::TaskGraphProtoBuf::Connection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TaskGraphProtoBuf::Connection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connection_taskgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Connection_taskgraph_2eproto}, {}};

static void InitDefaultsscc_info_Device_taskgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TaskGraphProtoBuf::_Device_default_instance_;
    new (ptr) ::TaskGraphProtoBuf::Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TaskGraphProtoBuf::Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_taskgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Device_taskgraph_2eproto}, {}};

static void InitDefaultsscc_info_Operator_taskgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TaskGraphProtoBuf::_Operator_default_instance_;
    new (ptr) ::TaskGraphProtoBuf::Operator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TaskGraphProtoBuf::Operator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Operator_taskgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Operator_taskgraph_2eproto}, {}};

static void InitDefaultsscc_info_Path_taskgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TaskGraphProtoBuf::_Path_default_instance_;
    new (ptr) ::TaskGraphProtoBuf::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TaskGraphProtoBuf::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_taskgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Path_taskgraph_2eproto}, {}};

static void InitDefaultsscc_info_Route_taskgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TaskGraphProtoBuf::_Route_default_instance_;
    new (ptr) ::TaskGraphProtoBuf::Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TaskGraphProtoBuf::Route::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Route_taskgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Route_taskgraph_2eproto}, {
      &scc_info_Path_taskgraph_2eproto.base,}};

static void InitDefaultsscc_info_Task_taskgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TaskGraphProtoBuf::_Task_default_instance_;
    new (ptr) ::TaskGraphProtoBuf::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TaskGraphProtoBuf::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Task_taskgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Task_taskgraph_2eproto}, {}};

static void InitDefaultsscc_info_TaskGraph_taskgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TaskGraphProtoBuf::_TaskGraph_default_instance_;
    new (ptr) ::TaskGraphProtoBuf::TaskGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TaskGraphProtoBuf::TaskGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TaskGraph_taskgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TaskGraph_taskgraph_2eproto}, {
      &scc_info_Connection_taskgraph_2eproto.base,
      &scc_info_Operator_taskgraph_2eproto.base,
      &scc_info_Task_taskgraph_2eproto.base,
      &scc_info_Device_taskgraph_2eproto.base,
      &scc_info_Route_taskgraph_2eproto.base,}};

static void InitDefaultsscc_info_Topology_taskgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TaskGraphProtoBuf::_Topology_default_instance_;
    new (ptr) ::TaskGraphProtoBuf::Topology();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TaskGraphProtoBuf::Topology::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Topology_taskgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Topology_taskgraph_2eproto}, {
      &scc_info_Connection_taskgraph_2eproto.base,
      &scc_info_Route_taskgraph_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_taskgraph_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_taskgraph_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_taskgraph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_taskgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Operator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Operator, opid_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Operator, type_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Operator, name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, type_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, taskid_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, deviceid_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, opid_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, runtime_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, xfersize_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, nexttasks_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Task, argroup_),
  2,
  0,
  1,
  4,
  3,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, type_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, deviceid_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, nodeid_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, gpuid_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, bandwidth_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, fromgpu_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, togpu_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, fromnode_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Device, tonode_),
  1,
  0,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Connection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Connection, from_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Connection, to_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Connection, nconn_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Path, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Path, hopnode_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Route, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Route, from_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Route, to_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Route, paths_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, ngpupernode_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, nnode_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, intergpubw_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, drambw_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, netbw_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, conn_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, ops_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, tasks_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, devices_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::TaskGraph, routes_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Topology, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Topology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Topology, netbw_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Topology, conn_),
  PROTOBUF_FIELD_OFFSET(::TaskGraphProtoBuf::Topology, routes_),
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::TaskGraphProtoBuf::Operator)},
  { 11, 24, sizeof(::TaskGraphProtoBuf::Task)},
  { 32, 46, sizeof(::TaskGraphProtoBuf::Device)},
  { 55, 63, sizeof(::TaskGraphProtoBuf::Connection)},
  { 66, 72, sizeof(::TaskGraphProtoBuf::Path)},
  { 73, 81, sizeof(::TaskGraphProtoBuf::Route)},
  { 84, 99, sizeof(::TaskGraphProtoBuf::TaskGraph)},
  { 109, 117, sizeof(::TaskGraphProtoBuf::Topology)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TaskGraphProtoBuf::_Operator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TaskGraphProtoBuf::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TaskGraphProtoBuf::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TaskGraphProtoBuf::_Connection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TaskGraphProtoBuf::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TaskGraphProtoBuf::_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TaskGraphProtoBuf::_TaskGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TaskGraphProtoBuf::_Topology_default_instance_),
};

const char descriptor_table_protodef_taskgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017taskgraph.proto\022\021TaskGraphProtoBuf\"\342\010\n"
  "\010Operator\022\014\n\004opid\030\001 \002(\004\0226\n\004type\030\002 \002(\0162(."
  "TaskGraphProtoBuf.Operator.OperatorType\022"
  "\014\n\004name\030\003 \002(\t\"\201\010\n\014OperatorType\022\014\n\010OP_INP"
  "UT\020\000\022\r\n\tOP_WEIGHT\020\001\022\n\n\006OP_ANY\020\002\022\r\n\tOP_CO"
  "NV2D\020\003\022\016\n\nOP_DROPOUT\020\004\022\r\n\tOP_LINEAR\020\005\022\022\n"
  "\016OP_BATCHMATMUL\020\006\022\r\n\tOP_POOL2D\020\007\022\013\n\007OP_R"
  "ELU\020\010\022\016\n\nOP_SIGMOID\020\t\022\013\n\007OP_TANH\020\n\022\n\n\006OP"
  "_ELU\020\013\022\013\n\007OP_FLAT\020\014\022\016\n\nOP_SOFTMAX\020\r\022\020\n\014O"
  "P_BATCHNORM\020\016\022\r\n\tOP_CONCAT\020\017\022\014\n\010OP_SPLIT"
  "\020\020\022\020\n\014OP_EMBEDDING\020\021\022\016\n\nOP_RESHAPE\020\023\022\016\n\n"
  "OP_REVERSE\020\024\022\020\n\014OP_TRANSPOSE\020\025\022\r\n\tOP_EW_"
  "ADD\020\026\022\r\n\tOP_EW_MUL\020\027\022\r\n\tOP_MATMUL\020\030\022\n\n\006O"
  "P_MUL\020\031\022\016\n\nOP_ENLARGE\020\032\022\022\n\016OP_MERGE_GCON"
  "V\020\033\022\023\n\017OP_CONSTANT_IMM\020\034\022\025\n\021OP_CONSTANT_"
  "ICONV\020\035\022\023\n\017OP_CONSTANT_ONE\020\036\022\024\n\020OP_CONST"
  "ANT_POOL\020\037\022\016\n\nOP_SQUEEZE\020 \022\020\n\014OP_UNSQUEE"
  "ZE\020!\022\r\n\tOP_EW_SUB\020\"\022\r\n\tOP_EW_DIV\020#\022\017\n\013OP"
  "_EW_EQUAL\020$\022\021\n\rOP_EW_GREATER\020%\022\016\n\nOP_EW_"
  "LESS\020&\022\r\n\tOP_EW_MAX\020\'\022\r\n\tOP_EW_MIN\020(\022\024\n\020"
  "OP_REDUCE_ARGMAX\020)\022\024\n\020OP_REDUCE_ARGMIN\020*"
  "\022\021\n\rOP_REDUCE_MAX\020+\022\022\n\016OP_REDUCE_MEAN\020,\022"
  "\021\n\rOP_REDUCE_MIN\020-\022\022\n\016OP_REDUCE_PROD\020.\022\021"
  "\n\rOP_REDUCE_SUM\020/\022\n\n\006OP_PAD\0200\022\014\n\010OP_SHAP"
  "E\0201\022\013\n\007OP_SIZE\0202\022\013\n\007OP_TOPK\0203\022\014\n\010OP_WHER"
  "E\0204\022\013\n\007OP_CEIL\0205\022\013\n\007OP_CAST\0206\022\n\n\006OP_EXP\020"
  "7\022\014\n\010OP_ROUND\0208\022\n\n\006OP_LOG\0209\022\022\n\016OP_LOGICA"
  "L_NOT\020:\022\013\n\007OP_SQRT\020;\022\020\n\014OP_LEAKYRELU\020<\022\014"
  "\n\010OP_SLICE\020=\022\r\n\tOP_RESIZE\020>\022\014\n\010OP_PRELU\020"
  "\?\"\310\002\n\004Task\0221\n\004type\030\001 \002(\0162#.TaskGraphProt"
  "oBuf.Task.SimTaskType\022\016\n\006taskid\030\002 \002(\004\022\020\n"
  "\010deviceid\030\003 \001(\004\022\014\n\004opid\030\004 \001(\004\022\017\n\007runtime"
  "\030\005 \001(\002\022\023\n\010xfersize\030\006 \001(\004:\0010\022\025\n\tnexttasks"
  "\030\007 \003(\004B\002\020\001\022\023\n\007argroup\030\010 \003(\004B\002\020\001\"\212\001\n\013SimT"
  "askType\022\020\n\014TASK_FORWARD\020\000\022\021\n\rTASK_BACKWA"
  "RD\020\001\022\r\n\tTASK_COMM\020\002\022\017\n\013TASK_UPDATE\020\003\022\020\n\014"
  "TASK_BARRIER\020\004\022\020\n\014TASK_LATENCY\020\005\022\022\n\016TASK"
  "_ALLREDUCE\020\006\"\304\002\n\006Device\0222\n\004type\030\001 \002(\0162$."
  "TaskGraphProtoBuf.Device.DeviceType\022\020\n\010d"
  "eviceid\030\002 \002(\004\022\021\n\006nodeid\030\003 \001(\r:\0010\022\020\n\005gpui"
  "d\030\004 \001(\r:\0010\022\024\n\tbandwidth\030\005 \001(\004:\0010\022\022\n\007from"
  "gpu\030\006 \001(\r:\0010\022\020\n\005togpu\030\007 \001(\r:\0010\022\023\n\010fromno"
  "de\030\010 \001(\r:\0010\022\021\n\006tonode\030\t \001(\r:\0010\"k\n\nDevice"
  "Type\022\016\n\nDEVICE_GPU\020\000\022\016\n\nDEVICE_CPU\020\001\022\023\n\017"
  "DEVICE_GPU_COMM\020\002\022\024\n\020DEVICE_DRAM_COMM\020\003\022"
  "\022\n\016DEVICE_NW_COMM\020\004\"5\n\nConnection\022\014\n\004fro"
  "m\030\001 \002(\r\022\n\n\002to\030\002 \002(\r\022\r\n\005nconn\030\003 \002(\r\"\033\n\004Pa"
  "th\022\023\n\007hopnode\030\001 \003(\rB\002\020\001\"I\n\005Route\022\014\n\004from"
  "\030\001 \002(\r\022\n\n\002to\030\002 \002(\r\022&\n\005paths\030\003 \003(\0132\027.Task"
  "GraphProtoBuf.Path\"\267\002\n\tTaskGraph\022\023\n\013nGPU"
  "PerNode\030\001 \002(\r\022\r\n\005nNode\030\002 \002(\r\022\022\n\ninterGPU"
  "BW\030\003 \002(\002\022\016\n\006dramBW\030\004 \002(\002\022\r\n\005netBW\030\005 \002(\002\022"
  "+\n\004conn\030\006 \003(\0132\035.TaskGraphProtoBuf.Connec"
  "tion\022(\n\003ops\030\007 \003(\0132\033.TaskGraphProtoBuf.Op"
  "erator\022&\n\005tasks\030\010 \003(\0132\027.TaskGraphProtoBu"
  "f.Task\022*\n\007devices\030\t \003(\0132\031.TaskGraphProto"
  "Buf.Device\022(\n\006routes\030\n \003(\0132\030.TaskGraphPr"
  "otoBuf.Route\"p\n\010Topology\022\r\n\005netBW\030\001 \001(\002\022"
  "+\n\004conn\030\002 \003(\0132\035.TaskGraphProtoBuf.Connec"
  "tion\022(\n\006routes\030\003 \003(\0132\030.TaskGraphProtoBuf"
  ".Route"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_taskgraph_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_taskgraph_2eproto_sccs[8] = {
  &scc_info_Connection_taskgraph_2eproto.base,
  &scc_info_Device_taskgraph_2eproto.base,
  &scc_info_Operator_taskgraph_2eproto.base,
  &scc_info_Path_taskgraph_2eproto.base,
  &scc_info_Route_taskgraph_2eproto.base,
  &scc_info_Task_taskgraph_2eproto.base,
  &scc_info_TaskGraph_taskgraph_2eproto.base,
  &scc_info_Topology_taskgraph_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_taskgraph_2eproto_once;
static bool descriptor_table_taskgraph_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_taskgraph_2eproto = {
  &descriptor_table_taskgraph_2eproto_initialized, descriptor_table_protodef_taskgraph_2eproto, "taskgraph.proto", 2406,
  &descriptor_table_taskgraph_2eproto_once, descriptor_table_taskgraph_2eproto_sccs, descriptor_table_taskgraph_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_taskgraph_2eproto::offsets,
  file_level_metadata_taskgraph_2eproto, 8, file_level_enum_descriptors_taskgraph_2eproto, file_level_service_descriptors_taskgraph_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_taskgraph_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_taskgraph_2eproto), true);
namespace TaskGraphProtoBuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_OperatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_taskgraph_2eproto);
  return file_level_enum_descriptors_taskgraph_2eproto[0];
}
bool Operator_OperatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Operator_OperatorType Operator::OP_INPUT;
constexpr Operator_OperatorType Operator::OP_WEIGHT;
constexpr Operator_OperatorType Operator::OP_ANY;
constexpr Operator_OperatorType Operator::OP_CONV2D;
constexpr Operator_OperatorType Operator::OP_DROPOUT;
constexpr Operator_OperatorType Operator::OP_LINEAR;
constexpr Operator_OperatorType Operator::OP_BATCHMATMUL;
constexpr Operator_OperatorType Operator::OP_POOL2D;
constexpr Operator_OperatorType Operator::OP_RELU;
constexpr Operator_OperatorType Operator::OP_SIGMOID;
constexpr Operator_OperatorType Operator::OP_TANH;
constexpr Operator_OperatorType Operator::OP_ELU;
constexpr Operator_OperatorType Operator::OP_FLAT;
constexpr Operator_OperatorType Operator::OP_SOFTMAX;
constexpr Operator_OperatorType Operator::OP_BATCHNORM;
constexpr Operator_OperatorType Operator::OP_CONCAT;
constexpr Operator_OperatorType Operator::OP_SPLIT;
constexpr Operator_OperatorType Operator::OP_EMBEDDING;
constexpr Operator_OperatorType Operator::OP_RESHAPE;
constexpr Operator_OperatorType Operator::OP_REVERSE;
constexpr Operator_OperatorType Operator::OP_TRANSPOSE;
constexpr Operator_OperatorType Operator::OP_EW_ADD;
constexpr Operator_OperatorType Operator::OP_EW_MUL;
constexpr Operator_OperatorType Operator::OP_MATMUL;
constexpr Operator_OperatorType Operator::OP_MUL;
constexpr Operator_OperatorType Operator::OP_ENLARGE;
constexpr Operator_OperatorType Operator::OP_MERGE_GCONV;
constexpr Operator_OperatorType Operator::OP_CONSTANT_IMM;
constexpr Operator_OperatorType Operator::OP_CONSTANT_ICONV;
constexpr Operator_OperatorType Operator::OP_CONSTANT_ONE;
constexpr Operator_OperatorType Operator::OP_CONSTANT_POOL;
constexpr Operator_OperatorType Operator::OP_SQUEEZE;
constexpr Operator_OperatorType Operator::OP_UNSQUEEZE;
constexpr Operator_OperatorType Operator::OP_EW_SUB;
constexpr Operator_OperatorType Operator::OP_EW_DIV;
constexpr Operator_OperatorType Operator::OP_EW_EQUAL;
constexpr Operator_OperatorType Operator::OP_EW_GREATER;
constexpr Operator_OperatorType Operator::OP_EW_LESS;
constexpr Operator_OperatorType Operator::OP_EW_MAX;
constexpr Operator_OperatorType Operator::OP_EW_MIN;
constexpr Operator_OperatorType Operator::OP_REDUCE_ARGMAX;
constexpr Operator_OperatorType Operator::OP_REDUCE_ARGMIN;
constexpr Operator_OperatorType Operator::OP_REDUCE_MAX;
constexpr Operator_OperatorType Operator::OP_REDUCE_MEAN;
constexpr Operator_OperatorType Operator::OP_REDUCE_MIN;
constexpr Operator_OperatorType Operator::OP_REDUCE_PROD;
constexpr Operator_OperatorType Operator::OP_REDUCE_SUM;
constexpr Operator_OperatorType Operator::OP_PAD;
constexpr Operator_OperatorType Operator::OP_SHAPE;
constexpr Operator_OperatorType Operator::OP_SIZE;
constexpr Operator_OperatorType Operator::OP_TOPK;
constexpr Operator_OperatorType Operator::OP_WHERE;
constexpr Operator_OperatorType Operator::OP_CEIL;
constexpr Operator_OperatorType Operator::OP_CAST;
constexpr Operator_OperatorType Operator::OP_EXP;
constexpr Operator_OperatorType Operator::OP_ROUND;
constexpr Operator_OperatorType Operator::OP_LOG;
constexpr Operator_OperatorType Operator::OP_LOGICAL_NOT;
constexpr Operator_OperatorType Operator::OP_SQRT;
constexpr Operator_OperatorType Operator::OP_LEAKYRELU;
constexpr Operator_OperatorType Operator::OP_SLICE;
constexpr Operator_OperatorType Operator::OP_RESIZE;
constexpr Operator_OperatorType Operator::OP_PRELU;
constexpr Operator_OperatorType Operator::OperatorType_MIN;
constexpr Operator_OperatorType Operator::OperatorType_MAX;
constexpr int Operator::OperatorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_SimTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_taskgraph_2eproto);
  return file_level_enum_descriptors_taskgraph_2eproto[1];
}
bool Task_SimTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Task_SimTaskType Task::TASK_FORWARD;
constexpr Task_SimTaskType Task::TASK_BACKWARD;
constexpr Task_SimTaskType Task::TASK_COMM;
constexpr Task_SimTaskType Task::TASK_UPDATE;
constexpr Task_SimTaskType Task::TASK_BARRIER;
constexpr Task_SimTaskType Task::TASK_LATENCY;
constexpr Task_SimTaskType Task::TASK_ALLREDUCE;
constexpr Task_SimTaskType Task::SimTaskType_MIN;
constexpr Task_SimTaskType Task::SimTaskType_MAX;
constexpr int Task::SimTaskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_taskgraph_2eproto);
  return file_level_enum_descriptors_taskgraph_2eproto[2];
}
bool Device_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Device_DeviceType Device::DEVICE_GPU;
constexpr Device_DeviceType Device::DEVICE_CPU;
constexpr Device_DeviceType Device::DEVICE_GPU_COMM;
constexpr Device_DeviceType Device::DEVICE_DRAM_COMM;
constexpr Device_DeviceType Device::DEVICE_NW_COMM;
constexpr Device_DeviceType Device::DeviceType_MIN;
constexpr Device_DeviceType Device::DeviceType_MAX;
constexpr int Device::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Operator::InitAsDefaultInstance() {
}
class Operator::_Internal {
 public:
  using HasBits = decltype(std::declval<Operator>()._has_bits_);
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Operator::Operator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskGraphProtoBuf.Operator)
}
Operator::Operator(const Operator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&opid_, &from.opid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&opid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:TaskGraphProtoBuf.Operator)
}

void Operator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Operator_taskgraph_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&opid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&opid_)) + sizeof(type_));
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:TaskGraphProtoBuf.Operator)
  SharedDtor();
}

void Operator::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Operator& Operator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Operator_taskgraph_2eproto.base);
  return *internal_default_instance();
}


void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskGraphProtoBuf.Operator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&opid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&opid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Operator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 opid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_opid(&has_bits);
          opid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TaskGraphProtoBuf.Operator.OperatorType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TaskGraphProtoBuf::Operator_OperatorType_IsValid(val))) {
            _internal_set_type(static_cast<::TaskGraphProtoBuf::Operator_OperatorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_name(), ptr, ctx, "TaskGraphProtoBuf.Operator.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskGraphProtoBuf.Operator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 opid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_opid(), target);
  }

  // required .TaskGraphProtoBuf.Operator.OperatorType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TaskGraphProtoBuf.Operator.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskGraphProtoBuf.Operator)
  return target;
}

size_t Operator::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TaskGraphProtoBuf.Operator)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (has_opid()) {
    // required uint64 opid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opid());
  }

  if (has_type()) {
    // required .TaskGraphProtoBuf.Operator.OperatorType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskGraphProtoBuf.Operator)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint64 opid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opid());

    // required .TaskGraphProtoBuf.Operator.OperatorType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskGraphProtoBuf.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  const Operator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Operator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskGraphProtoBuf.Operator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskGraphProtoBuf.Operator)
    MergeFrom(*source);
  }
}

void Operator::MergeFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskGraphProtoBuf.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      opid_ = from.opid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Operator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskGraphProtoBuf.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskGraphProtoBuf.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Operator::InternalSwap(Operator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(opid_, other->opid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Task::InitAsDefaultInstance() {
}
class Task::_Internal {
 public:
  using HasBits = decltype(std::declval<Task>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_runtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_xfersize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Task::Task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskGraphProtoBuf.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      nexttasks_(from.nexttasks_),
      argroup_(from.argroup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&xfersize_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(xfersize_));
  // @@protoc_insertion_point(copy_constructor:TaskGraphProtoBuf.Task)
}

void Task::SharedCtor() {
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xfersize_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(xfersize_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:TaskGraphProtoBuf.Task)
  SharedDtor();
}

void Task::SharedDtor() {
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_taskgraph_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskGraphProtoBuf.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nexttasks_.Clear();
  argroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&taskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xfersize_) -
        reinterpret_cast<char*>(&taskid_)) + sizeof(xfersize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .TaskGraphProtoBuf.Task.SimTaskType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TaskGraphProtoBuf::Task_SimTaskType_IsValid(val))) {
            _internal_set_type(static_cast<::TaskGraphProtoBuf::Task_SimTaskType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 taskid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_taskid(&has_bits);
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 deviceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 opid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_opid(&has_bits);
          opid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float runtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_runtime(&has_bits);
          runtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 xfersize = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_xfersize(&has_bits);
          xfersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 nexttasks = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_nexttasks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_nexttasks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 argroup = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_argroup(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_argroup(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskGraphProtoBuf.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TaskGraphProtoBuf.Task.SimTaskType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required uint64 taskid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_taskid(), target);
  }

  // optional uint64 deviceid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_deviceid(), target);
  }

  // optional uint64 opid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_opid(), target);
  }

  // optional float runtime = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_runtime(), target);
  }

  // optional uint64 xfersize = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_xfersize(), target);
  }

  // repeated uint64 nexttasks = 7 [packed = true];
  {
    int byte_size = _nexttasks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_nexttasks(), byte_size, target);
    }
  }

  // repeated uint64 argroup = 8 [packed = true];
  {
    int byte_size = _argroup_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          8, _internal_argroup(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskGraphProtoBuf.Task)
  return target;
}

size_t Task::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TaskGraphProtoBuf.Task)
  size_t total_size = 0;

  if (has_taskid()) {
    // required uint64 taskid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_taskid());
  }

  if (has_type()) {
    // required .TaskGraphProtoBuf.Task.SimTaskType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskGraphProtoBuf.Task)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required uint64 taskid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_taskid());

    // required .TaskGraphProtoBuf.Task.SimTaskType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 nexttasks = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->nexttasks_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nexttasks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 argroup = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->argroup_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _argroup_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint64 deviceid = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_deviceid());
  }

  if (cached_has_bits & 0x00000038u) {
    // optional float runtime = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint64 opid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_opid());
    }

    // optional uint64 xfersize = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_xfersize());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskGraphProtoBuf.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskGraphProtoBuf.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskGraphProtoBuf.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskGraphProtoBuf.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nexttasks_.MergeFrom(from.nexttasks_);
  argroup_.MergeFrom(from.argroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      taskid_ = from.taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      runtime_ = from.runtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      opid_ = from.opid_;
    }
    if (cached_has_bits & 0x00000020u) {
      xfersize_ = from.xfersize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskGraphProtoBuf.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskGraphProtoBuf.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nexttasks_.InternalSwap(&other->nexttasks_);
  argroup_.InternalSwap(&other->argroup_);
  swap(taskid_, other->taskid_);
  swap(deviceid_, other->deviceid_);
  swap(type_, other->type_);
  swap(runtime_, other->runtime_);
  swap(opid_, other->opid_);
  swap(xfersize_, other->xfersize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Device::InitAsDefaultInstance() {
}
class Device::_Internal {
 public:
  using HasBits = decltype(std::declval<Device>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nodeid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gpuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fromgpu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_togpu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fromnode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tonode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Device::Device()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskGraphProtoBuf.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deviceid_, &from.deviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tonode_) -
    reinterpret_cast<char*>(&deviceid_)) + sizeof(tonode_));
  // @@protoc_insertion_point(copy_constructor:TaskGraphProtoBuf.Device)
}

void Device::SharedCtor() {
  ::memset(&deviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tonode_) -
      reinterpret_cast<char*>(&deviceid_)) + sizeof(tonode_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:TaskGraphProtoBuf.Device)
  SharedDtor();
}

void Device::SharedDtor() {
}

void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Device_taskgraph_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskGraphProtoBuf.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&deviceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fromnode_) -
        reinterpret_cast<char*>(&deviceid_)) + sizeof(fromnode_));
  }
  tonode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .TaskGraphProtoBuf.Device.DeviceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TaskGraphProtoBuf::Device_DeviceType_IsValid(val))) {
            _internal_set_type(static_cast<::TaskGraphProtoBuf::Device_DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 deviceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nodeid = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nodeid(&has_bits);
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpuid = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gpuid(&has_bits);
          gpuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bandwidth = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bandwidth(&has_bits);
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fromgpu = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_fromgpu(&has_bits);
          fromgpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 togpu = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_togpu(&has_bits);
          togpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fromnode = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fromnode(&has_bits);
          fromnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tonode = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tonode(&has_bits);
          tonode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskGraphProtoBuf.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TaskGraphProtoBuf.Device.DeviceType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required uint64 deviceid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_deviceid(), target);
  }

  // optional uint32 nodeid = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nodeid(), target);
  }

  // optional uint32 gpuid = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gpuid(), target);
  }

  // optional uint64 bandwidth = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bandwidth(), target);
  }

  // optional uint32 fromgpu = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fromgpu(), target);
  }

  // optional uint32 togpu = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_togpu(), target);
  }

  // optional uint32 fromnode = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fromnode(), target);
  }

  // optional uint32 tonode = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tonode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskGraphProtoBuf.Device)
  return target;
}

size_t Device::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TaskGraphProtoBuf.Device)
  size_t total_size = 0;

  if (has_deviceid()) {
    // required uint64 deviceid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_deviceid());
  }

  if (has_type()) {
    // required .TaskGraphProtoBuf.Device.DeviceType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskGraphProtoBuf.Device)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 deviceid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_deviceid());

    // required .TaskGraphProtoBuf.Device.DeviceType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional uint32 nodeid = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nodeid());
    }

    // optional uint64 bandwidth = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bandwidth());
    }

    // optional uint32 gpuid = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpuid());
    }

    // optional uint32 fromgpu = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fromgpu());
    }

    // optional uint32 togpu = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_togpu());
    }

    // optional uint32 fromnode = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fromnode());
    }

  }
  // optional uint32 tonode = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tonode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskGraphProtoBuf.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskGraphProtoBuf.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskGraphProtoBuf.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskGraphProtoBuf.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      nodeid_ = from.nodeid_;
    }
    if (cached_has_bits & 0x00000008u) {
      bandwidth_ = from.bandwidth_;
    }
    if (cached_has_bits & 0x00000010u) {
      gpuid_ = from.gpuid_;
    }
    if (cached_has_bits & 0x00000020u) {
      fromgpu_ = from.fromgpu_;
    }
    if (cached_has_bits & 0x00000040u) {
      togpu_ = from.togpu_;
    }
    if (cached_has_bits & 0x00000080u) {
      fromnode_ = from.fromnode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_tonode(from._internal_tonode());
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskGraphProtoBuf.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskGraphProtoBuf.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(deviceid_, other->deviceid_);
  swap(type_, other->type_);
  swap(nodeid_, other->nodeid_);
  swap(bandwidth_, other->bandwidth_);
  swap(gpuid_, other->gpuid_);
  swap(fromgpu_, other->fromgpu_);
  swap(togpu_, other->togpu_);
  swap(fromnode_, other->fromnode_);
  swap(tonode_, other->tonode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Connection::InitAsDefaultInstance() {
}
class Connection::_Internal {
 public:
  using HasBits = decltype(std::declval<Connection>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nconn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Connection::Connection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskGraphProtoBuf.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&nconn_) -
    reinterpret_cast<char*>(&from_)) + sizeof(nconn_));
  // @@protoc_insertion_point(copy_constructor:TaskGraphProtoBuf.Connection)
}

void Connection::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nconn_) -
      reinterpret_cast<char*>(&from_)) + sizeof(nconn_));
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:TaskGraphProtoBuf.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
}

void Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Connection& Connection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Connection_taskgraph_2eproto.base);
  return *internal_default_instance();
}


void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskGraphProtoBuf.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nconn_) -
        reinterpret_cast<char*>(&from_)) + sizeof(nconn_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Connection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_from(&has_bits);
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_to(&has_bits);
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nconn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nconn(&has_bits);
          nconn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskGraphProtoBuf.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // required uint32 to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // required uint32 nconn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nconn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskGraphProtoBuf.Connection)
  return target;
}

size_t Connection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TaskGraphProtoBuf.Connection)
  size_t total_size = 0;

  if (has_from()) {
    // required uint32 from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  if (has_to()) {
    // required uint32 to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  if (has_nconn()) {
    // required uint32 nconn = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nconn());
  }

  return total_size;
}
size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskGraphProtoBuf.Connection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());

    // required uint32 to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());

    // required uint32 nconn = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nconn());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskGraphProtoBuf.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Connection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskGraphProtoBuf.Connection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskGraphProtoBuf.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskGraphProtoBuf.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_ = from.from_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_ = from.to_;
    }
    if (cached_has_bits & 0x00000004u) {
      nconn_ = from.nconn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Connection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskGraphProtoBuf.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskGraphProtoBuf.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(nconn_, other->nconn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
  using HasBits = decltype(std::declval<Path>()._has_bits_);
};

Path::Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskGraphProtoBuf.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hopnode_(from.hopnode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TaskGraphProtoBuf.Path)
}

void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:TaskGraphProtoBuf.Path)
  SharedDtor();
}

void Path::SharedDtor() {
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_taskgraph_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskGraphProtoBuf.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hopnode_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 hopnode = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hopnode(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_hopnode(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskGraphProtoBuf.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hopnode = 1 [packed = true];
  {
    int byte_size = _hopnode_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_hopnode(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskGraphProtoBuf.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskGraphProtoBuf.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hopnode = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hopnode_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hopnode_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskGraphProtoBuf.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskGraphProtoBuf.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskGraphProtoBuf.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskGraphProtoBuf.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hopnode_.MergeFrom(from.hopnode_);
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskGraphProtoBuf.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskGraphProtoBuf.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hopnode_.InternalSwap(&other->hopnode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Route::InitAsDefaultInstance() {
}
class Route::_Internal {
 public:
  using HasBits = decltype(std::declval<Route>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Route::Route()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskGraphProtoBuf.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:TaskGraphProtoBuf.Route)
}

void Route::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Route_taskgraph_2eproto.base);
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:TaskGraphProtoBuf.Route)
  SharedDtor();
}

void Route::SharedDtor() {
}

void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Route& Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Route_taskgraph_2eproto.base);
  return *internal_default_instance();
}


void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskGraphProtoBuf.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_) -
        reinterpret_cast<char*>(&from_)) + sizeof(to_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_from(&has_bits);
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_to(&has_bits);
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TaskGraphProtoBuf.Path paths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Route::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskGraphProtoBuf.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // required uint32 to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // repeated .TaskGraphProtoBuf.Path paths = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskGraphProtoBuf.Route)
  return target;
}

size_t Route::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TaskGraphProtoBuf.Route)
  size_t total_size = 0;

  if (has_from()) {
    // required uint32 from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  if (has_to()) {
    // required uint32 to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  return total_size;
}
size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskGraphProtoBuf.Route)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());

    // required uint32 to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TaskGraphProtoBuf.Path paths = 3;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskGraphProtoBuf.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskGraphProtoBuf.Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskGraphProtoBuf.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskGraphProtoBuf.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_ = from.from_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_ = from.to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskGraphProtoBuf.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskGraphProtoBuf.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paths_.InternalSwap(&other->paths_);
  swap(from_, other->from_);
  swap(to_, other->to_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskGraph::InitAsDefaultInstance() {
}
class TaskGraph::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskGraph>()._has_bits_);
  static void set_has_ngpupernode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nnode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_intergpubw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drambw(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_netbw(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TaskGraph::TaskGraph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskGraphProtoBuf.TaskGraph)
}
TaskGraph::TaskGraph(const TaskGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      conn_(from.conn_),
      ops_(from.ops_),
      tasks_(from.tasks_),
      devices_(from.devices_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ngpupernode_, &from.ngpupernode_,
    static_cast<size_t>(reinterpret_cast<char*>(&netbw_) -
    reinterpret_cast<char*>(&ngpupernode_)) + sizeof(netbw_));
  // @@protoc_insertion_point(copy_constructor:TaskGraphProtoBuf.TaskGraph)
}

void TaskGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskGraph_taskgraph_2eproto.base);
  ::memset(&ngpupernode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&netbw_) -
      reinterpret_cast<char*>(&ngpupernode_)) + sizeof(netbw_));
}

TaskGraph::~TaskGraph() {
  // @@protoc_insertion_point(destructor:TaskGraphProtoBuf.TaskGraph)
  SharedDtor();
}

void TaskGraph::SharedDtor() {
}

void TaskGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskGraph& TaskGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskGraph_taskgraph_2eproto.base);
  return *internal_default_instance();
}


void TaskGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskGraphProtoBuf.TaskGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conn_.Clear();
  ops_.Clear();
  tasks_.Clear();
  devices_.Clear();
  routes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ngpupernode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&netbw_) -
        reinterpret_cast<char*>(&ngpupernode_)) + sizeof(netbw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TaskGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 nGPUPerNode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ngpupernode(&has_bits);
          ngpupernode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nnode(&has_bits);
          nnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float interGPUBW = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_intergpubw(&has_bits);
          intergpubw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float dramBW = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_drambw(&has_bits);
          drambw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float netBW = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_netbw(&has_bits);
          netbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .TaskGraphProtoBuf.Connection conn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TaskGraphProtoBuf.Operator ops = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TaskGraphProtoBuf.Task tasks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TaskGraphProtoBuf.Device devices = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TaskGraphProtoBuf.Route routes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskGraph::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskGraphProtoBuf.TaskGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 nGPUPerNode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ngpupernode(), target);
  }

  // required uint32 nNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nnode(), target);
  }

  // required float interGPUBW = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_intergpubw(), target);
  }

  // required float dramBW = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_drambw(), target);
  }

  // required float netBW = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_netbw(), target);
  }

  // repeated .TaskGraphProtoBuf.Connection conn = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conn_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_conn(i), target, stream);
  }

  // repeated .TaskGraphProtoBuf.Operator ops = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_ops(i), target, stream);
  }

  // repeated .TaskGraphProtoBuf.Task tasks = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_tasks(i), target, stream);
  }

  // repeated .TaskGraphProtoBuf.Device devices = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_devices(i), target, stream);
  }

  // repeated .TaskGraphProtoBuf.Route routes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskGraphProtoBuf.TaskGraph)
  return target;
}

size_t TaskGraph::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TaskGraphProtoBuf.TaskGraph)
  size_t total_size = 0;

  if (has_ngpupernode()) {
    // required uint32 nGPUPerNode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ngpupernode());
  }

  if (has_nnode()) {
    // required uint32 nNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nnode());
  }

  if (has_intergpubw()) {
    // required float interGPUBW = 3;
    total_size += 1 + 4;
  }

  if (has_drambw()) {
    // required float dramBW = 4;
    total_size += 1 + 4;
  }

  if (has_netbw()) {
    // required float netBW = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TaskGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskGraphProtoBuf.TaskGraph)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 nGPUPerNode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ngpupernode());

    // required uint32 nNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nnode());

    // required float interGPUBW = 3;
    total_size += 1 + 4;

    // required float dramBW = 4;
    total_size += 1 + 4;

    // required float netBW = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TaskGraphProtoBuf.Connection conn = 6;
  total_size += 1UL * this->_internal_conn_size();
  for (const auto& msg : this->conn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TaskGraphProtoBuf.Operator ops = 7;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TaskGraphProtoBuf.Task tasks = 8;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TaskGraphProtoBuf.Device devices = 9;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TaskGraphProtoBuf.Route routes = 10;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskGraphProtoBuf.TaskGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskGraphProtoBuf.TaskGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskGraphProtoBuf.TaskGraph)
    MergeFrom(*source);
  }
}

void TaskGraph::MergeFrom(const TaskGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskGraphProtoBuf.TaskGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conn_.MergeFrom(from.conn_);
  ops_.MergeFrom(from.ops_);
  tasks_.MergeFrom(from.tasks_);
  devices_.MergeFrom(from.devices_);
  routes_.MergeFrom(from.routes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ngpupernode_ = from.ngpupernode_;
    }
    if (cached_has_bits & 0x00000002u) {
      nnode_ = from.nnode_;
    }
    if (cached_has_bits & 0x00000004u) {
      intergpubw_ = from.intergpubw_;
    }
    if (cached_has_bits & 0x00000008u) {
      drambw_ = from.drambw_;
    }
    if (cached_has_bits & 0x00000010u) {
      netbw_ = from.netbw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskGraphProtoBuf.TaskGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskGraph::CopyFrom(const TaskGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskGraphProtoBuf.TaskGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskGraph::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->conn())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->ops())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->tasks())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->devices())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->routes())) return false;
  return true;
}

void TaskGraph::InternalSwap(TaskGraph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conn_.InternalSwap(&other->conn_);
  ops_.InternalSwap(&other->ops_);
  tasks_.InternalSwap(&other->tasks_);
  devices_.InternalSwap(&other->devices_);
  routes_.InternalSwap(&other->routes_);
  swap(ngpupernode_, other->ngpupernode_);
  swap(nnode_, other->nnode_);
  swap(intergpubw_, other->intergpubw_);
  swap(drambw_, other->drambw_);
  swap(netbw_, other->netbw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Topology::InitAsDefaultInstance() {
}
class Topology::_Internal {
 public:
  using HasBits = decltype(std::declval<Topology>()._has_bits_);
  static void set_has_netbw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Topology::Topology()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskGraphProtoBuf.Topology)
}
Topology::Topology(const Topology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      conn_(from.conn_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  netbw_ = from.netbw_;
  // @@protoc_insertion_point(copy_constructor:TaskGraphProtoBuf.Topology)
}

void Topology::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Topology_taskgraph_2eproto.base);
  netbw_ = 0;
}

Topology::~Topology() {
  // @@protoc_insertion_point(destructor:TaskGraphProtoBuf.Topology)
  SharedDtor();
}

void Topology::SharedDtor() {
}

void Topology::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Topology& Topology::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Topology_taskgraph_2eproto.base);
  return *internal_default_instance();
}


void Topology::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskGraphProtoBuf.Topology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conn_.Clear();
  routes_.Clear();
  netbw_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Topology::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float netBW = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_netbw(&has_bits);
          netbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .TaskGraphProtoBuf.Connection conn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TaskGraphProtoBuf.Route routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Topology::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskGraphProtoBuf.Topology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float netBW = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_netbw(), target);
  }

  // repeated .TaskGraphProtoBuf.Connection conn = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conn_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_conn(i), target, stream);
  }

  // repeated .TaskGraphProtoBuf.Route routes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskGraphProtoBuf.Topology)
  return target;
}

size_t Topology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskGraphProtoBuf.Topology)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TaskGraphProtoBuf.Connection conn = 2;
  total_size += 1UL * this->_internal_conn_size();
  for (const auto& msg : this->conn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TaskGraphProtoBuf.Route routes = 3;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float netBW = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Topology::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskGraphProtoBuf.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  const Topology* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Topology>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskGraphProtoBuf.Topology)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskGraphProtoBuf.Topology)
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskGraphProtoBuf.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conn_.MergeFrom(from.conn_);
  routes_.MergeFrom(from.routes_);
  if (from._internal_has_netbw()) {
    _internal_set_netbw(from._internal_netbw());
  }
}

void Topology::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskGraphProtoBuf.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskGraphProtoBuf.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->conn())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->routes())) return false;
  return true;
}

void Topology::InternalSwap(Topology* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conn_.InternalSwap(&other->conn_);
  routes_.InternalSwap(&other->routes_);
  swap(netbw_, other->netbw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Topology::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TaskGraphProtoBuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TaskGraphProtoBuf::Operator* Arena::CreateMaybeMessage< ::TaskGraphProtoBuf::Operator >(Arena* arena) {
  return Arena::CreateInternal< ::TaskGraphProtoBuf::Operator >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskGraphProtoBuf::Task* Arena::CreateMaybeMessage< ::TaskGraphProtoBuf::Task >(Arena* arena) {
  return Arena::CreateInternal< ::TaskGraphProtoBuf::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskGraphProtoBuf::Device* Arena::CreateMaybeMessage< ::TaskGraphProtoBuf::Device >(Arena* arena) {
  return Arena::CreateInternal< ::TaskGraphProtoBuf::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskGraphProtoBuf::Connection* Arena::CreateMaybeMessage< ::TaskGraphProtoBuf::Connection >(Arena* arena) {
  return Arena::CreateInternal< ::TaskGraphProtoBuf::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskGraphProtoBuf::Path* Arena::CreateMaybeMessage< ::TaskGraphProtoBuf::Path >(Arena* arena) {
  return Arena::CreateInternal< ::TaskGraphProtoBuf::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskGraphProtoBuf::Route* Arena::CreateMaybeMessage< ::TaskGraphProtoBuf::Route >(Arena* arena) {
  return Arena::CreateInternal< ::TaskGraphProtoBuf::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskGraphProtoBuf::TaskGraph* Arena::CreateMaybeMessage< ::TaskGraphProtoBuf::TaskGraph >(Arena* arena) {
  return Arena::CreateInternal< ::TaskGraphProtoBuf::TaskGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskGraphProtoBuf::Topology* Arena::CreateMaybeMessage< ::TaskGraphProtoBuf::Topology >(Arena* arena) {
  return Arena::CreateInternal< ::TaskGraphProtoBuf::Topology >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
