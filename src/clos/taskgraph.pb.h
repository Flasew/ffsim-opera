// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskgraph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_taskgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_taskgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_taskgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_taskgraph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_taskgraph_2eproto;
namespace TaskGraphProtoBuf {
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Operator;
class OperatorDefaultTypeInternal;
extern OperatorDefaultTypeInternal _Operator_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskGraph;
class TaskGraphDefaultTypeInternal;
extern TaskGraphDefaultTypeInternal _TaskGraph_default_instance_;
class Topology;
class TopologyDefaultTypeInternal;
extern TopologyDefaultTypeInternal _Topology_default_instance_;
}  // namespace TaskGraphProtoBuf
PROTOBUF_NAMESPACE_OPEN
template<> ::TaskGraphProtoBuf::Connection* Arena::CreateMaybeMessage<::TaskGraphProtoBuf::Connection>(Arena*);
template<> ::TaskGraphProtoBuf::Device* Arena::CreateMaybeMessage<::TaskGraphProtoBuf::Device>(Arena*);
template<> ::TaskGraphProtoBuf::Operator* Arena::CreateMaybeMessage<::TaskGraphProtoBuf::Operator>(Arena*);
template<> ::TaskGraphProtoBuf::Path* Arena::CreateMaybeMessage<::TaskGraphProtoBuf::Path>(Arena*);
template<> ::TaskGraphProtoBuf::Route* Arena::CreateMaybeMessage<::TaskGraphProtoBuf::Route>(Arena*);
template<> ::TaskGraphProtoBuf::Task* Arena::CreateMaybeMessage<::TaskGraphProtoBuf::Task>(Arena*);
template<> ::TaskGraphProtoBuf::TaskGraph* Arena::CreateMaybeMessage<::TaskGraphProtoBuf::TaskGraph>(Arena*);
template<> ::TaskGraphProtoBuf::Topology* Arena::CreateMaybeMessage<::TaskGraphProtoBuf::Topology>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TaskGraphProtoBuf {

enum Operator_OperatorType : int {
  Operator_OperatorType_OP_INPUT = 0,
  Operator_OperatorType_OP_WEIGHT = 1,
  Operator_OperatorType_OP_ANY = 2,
  Operator_OperatorType_OP_CONV2D = 3,
  Operator_OperatorType_OP_DROPOUT = 4,
  Operator_OperatorType_OP_LINEAR = 5,
  Operator_OperatorType_OP_BATCHMATMUL = 6,
  Operator_OperatorType_OP_POOL2D = 7,
  Operator_OperatorType_OP_RELU = 8,
  Operator_OperatorType_OP_SIGMOID = 9,
  Operator_OperatorType_OP_TANH = 10,
  Operator_OperatorType_OP_ELU = 11,
  Operator_OperatorType_OP_FLAT = 12,
  Operator_OperatorType_OP_SOFTMAX = 13,
  Operator_OperatorType_OP_BATCHNORM = 14,
  Operator_OperatorType_OP_CONCAT = 15,
  Operator_OperatorType_OP_SPLIT = 16,
  Operator_OperatorType_OP_EMBEDDING = 17,
  Operator_OperatorType_OP_RESHAPE = 19,
  Operator_OperatorType_OP_REVERSE = 20,
  Operator_OperatorType_OP_TRANSPOSE = 21,
  Operator_OperatorType_OP_EW_ADD = 22,
  Operator_OperatorType_OP_EW_MUL = 23,
  Operator_OperatorType_OP_MATMUL = 24,
  Operator_OperatorType_OP_MUL = 25,
  Operator_OperatorType_OP_ENLARGE = 26,
  Operator_OperatorType_OP_MERGE_GCONV = 27,
  Operator_OperatorType_OP_CONSTANT_IMM = 28,
  Operator_OperatorType_OP_CONSTANT_ICONV = 29,
  Operator_OperatorType_OP_CONSTANT_ONE = 30,
  Operator_OperatorType_OP_CONSTANT_POOL = 31,
  Operator_OperatorType_OP_SQUEEZE = 32,
  Operator_OperatorType_OP_UNSQUEEZE = 33,
  Operator_OperatorType_OP_EW_SUB = 34,
  Operator_OperatorType_OP_EW_DIV = 35,
  Operator_OperatorType_OP_EW_EQUAL = 36,
  Operator_OperatorType_OP_EW_GREATER = 37,
  Operator_OperatorType_OP_EW_LESS = 38,
  Operator_OperatorType_OP_EW_MAX = 39,
  Operator_OperatorType_OP_EW_MIN = 40,
  Operator_OperatorType_OP_REDUCE_ARGMAX = 41,
  Operator_OperatorType_OP_REDUCE_ARGMIN = 42,
  Operator_OperatorType_OP_REDUCE_MAX = 43,
  Operator_OperatorType_OP_REDUCE_MEAN = 44,
  Operator_OperatorType_OP_REDUCE_MIN = 45,
  Operator_OperatorType_OP_REDUCE_PROD = 46,
  Operator_OperatorType_OP_REDUCE_SUM = 47,
  Operator_OperatorType_OP_PAD = 48,
  Operator_OperatorType_OP_SHAPE = 49,
  Operator_OperatorType_OP_SIZE = 50,
  Operator_OperatorType_OP_TOPK = 51,
  Operator_OperatorType_OP_WHERE = 52,
  Operator_OperatorType_OP_CEIL = 53,
  Operator_OperatorType_OP_CAST = 54,
  Operator_OperatorType_OP_EXP = 55,
  Operator_OperatorType_OP_ROUND = 56,
  Operator_OperatorType_OP_LOG = 57,
  Operator_OperatorType_OP_LOGICAL_NOT = 58,
  Operator_OperatorType_OP_SQRT = 59,
  Operator_OperatorType_OP_LEAKYRELU = 60,
  Operator_OperatorType_OP_SLICE = 61,
  Operator_OperatorType_OP_RESIZE = 62,
  Operator_OperatorType_OP_PRELU = 63
};
bool Operator_OperatorType_IsValid(int value);
constexpr Operator_OperatorType Operator_OperatorType_OperatorType_MIN = Operator_OperatorType_OP_INPUT;
constexpr Operator_OperatorType Operator_OperatorType_OperatorType_MAX = Operator_OperatorType_OP_PRELU;
constexpr int Operator_OperatorType_OperatorType_ARRAYSIZE = Operator_OperatorType_OperatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_OperatorType_descriptor();
template<typename T>
inline const std::string& Operator_OperatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operator_OperatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operator_OperatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operator_OperatorType_descriptor(), enum_t_value);
}
inline bool Operator_OperatorType_Parse(
    const std::string& name, Operator_OperatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operator_OperatorType>(
    Operator_OperatorType_descriptor(), name, value);
}
enum Task_SimTaskType : int {
  Task_SimTaskType_TASK_FORWARD = 0,
  Task_SimTaskType_TASK_BACKWARD = 1,
  Task_SimTaskType_TASK_COMM = 2,
  Task_SimTaskType_TASK_UPDATE = 3,
  Task_SimTaskType_TASK_BARRIER = 4,
  Task_SimTaskType_TASK_LATENCY = 5,
  Task_SimTaskType_TASK_ALLREDUCE = 6
};
bool Task_SimTaskType_IsValid(int value);
constexpr Task_SimTaskType Task_SimTaskType_SimTaskType_MIN = Task_SimTaskType_TASK_FORWARD;
constexpr Task_SimTaskType Task_SimTaskType_SimTaskType_MAX = Task_SimTaskType_TASK_ALLREDUCE;
constexpr int Task_SimTaskType_SimTaskType_ARRAYSIZE = Task_SimTaskType_SimTaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_SimTaskType_descriptor();
template<typename T>
inline const std::string& Task_SimTaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Task_SimTaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Task_SimTaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Task_SimTaskType_descriptor(), enum_t_value);
}
inline bool Task_SimTaskType_Parse(
    const std::string& name, Task_SimTaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Task_SimTaskType>(
    Task_SimTaskType_descriptor(), name, value);
}
enum Device_DeviceType : int {
  Device_DeviceType_DEVICE_GPU = 0,
  Device_DeviceType_DEVICE_CPU = 1,
  Device_DeviceType_DEVICE_GPU_COMM = 2,
  Device_DeviceType_DEVICE_DRAM_COMM = 3,
  Device_DeviceType_DEVICE_NW_COMM = 4
};
bool Device_DeviceType_IsValid(int value);
constexpr Device_DeviceType Device_DeviceType_DeviceType_MIN = Device_DeviceType_DEVICE_GPU;
constexpr Device_DeviceType Device_DeviceType_DeviceType_MAX = Device_DeviceType_DEVICE_NW_COMM;
constexpr int Device_DeviceType_DeviceType_ARRAYSIZE = Device_DeviceType_DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_DeviceType_descriptor();
template<typename T>
inline const std::string& Device_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_DeviceType_descriptor(), enum_t_value);
}
inline bool Device_DeviceType_Parse(
    const std::string& name, Device_DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_DeviceType>(
    Device_DeviceType_descriptor(), name, value);
}
// ===================================================================

class Operator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskGraphProtoBuf.Operator) */ {
 public:
  Operator();
  virtual ~Operator();

  Operator(const Operator& from);
  Operator(Operator&& from) noexcept
    : Operator() {
    *this = ::std::move(from);
  }

  inline Operator& operator=(const Operator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operator& operator=(Operator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operator* internal_default_instance() {
    return reinterpret_cast<const Operator*>(
               &_Operator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Operator& a, Operator& b) {
    a.Swap(&b);
  }
  inline void Swap(Operator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operator* New() const final {
    return CreateMaybeMessage<Operator>(nullptr);
  }

  Operator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operator& from);
  void MergeFrom(const Operator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskGraphProtoBuf.Operator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_taskgraph_2eproto);
    return ::descriptor_table_taskgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Operator_OperatorType OperatorType;
  static constexpr OperatorType OP_INPUT =
    Operator_OperatorType_OP_INPUT;
  static constexpr OperatorType OP_WEIGHT =
    Operator_OperatorType_OP_WEIGHT;
  static constexpr OperatorType OP_ANY =
    Operator_OperatorType_OP_ANY;
  static constexpr OperatorType OP_CONV2D =
    Operator_OperatorType_OP_CONV2D;
  static constexpr OperatorType OP_DROPOUT =
    Operator_OperatorType_OP_DROPOUT;
  static constexpr OperatorType OP_LINEAR =
    Operator_OperatorType_OP_LINEAR;
  static constexpr OperatorType OP_BATCHMATMUL =
    Operator_OperatorType_OP_BATCHMATMUL;
  static constexpr OperatorType OP_POOL2D =
    Operator_OperatorType_OP_POOL2D;
  static constexpr OperatorType OP_RELU =
    Operator_OperatorType_OP_RELU;
  static constexpr OperatorType OP_SIGMOID =
    Operator_OperatorType_OP_SIGMOID;
  static constexpr OperatorType OP_TANH =
    Operator_OperatorType_OP_TANH;
  static constexpr OperatorType OP_ELU =
    Operator_OperatorType_OP_ELU;
  static constexpr OperatorType OP_FLAT =
    Operator_OperatorType_OP_FLAT;
  static constexpr OperatorType OP_SOFTMAX =
    Operator_OperatorType_OP_SOFTMAX;
  static constexpr OperatorType OP_BATCHNORM =
    Operator_OperatorType_OP_BATCHNORM;
  static constexpr OperatorType OP_CONCAT =
    Operator_OperatorType_OP_CONCAT;
  static constexpr OperatorType OP_SPLIT =
    Operator_OperatorType_OP_SPLIT;
  static constexpr OperatorType OP_EMBEDDING =
    Operator_OperatorType_OP_EMBEDDING;
  static constexpr OperatorType OP_RESHAPE =
    Operator_OperatorType_OP_RESHAPE;
  static constexpr OperatorType OP_REVERSE =
    Operator_OperatorType_OP_REVERSE;
  static constexpr OperatorType OP_TRANSPOSE =
    Operator_OperatorType_OP_TRANSPOSE;
  static constexpr OperatorType OP_EW_ADD =
    Operator_OperatorType_OP_EW_ADD;
  static constexpr OperatorType OP_EW_MUL =
    Operator_OperatorType_OP_EW_MUL;
  static constexpr OperatorType OP_MATMUL =
    Operator_OperatorType_OP_MATMUL;
  static constexpr OperatorType OP_MUL =
    Operator_OperatorType_OP_MUL;
  static constexpr OperatorType OP_ENLARGE =
    Operator_OperatorType_OP_ENLARGE;
  static constexpr OperatorType OP_MERGE_GCONV =
    Operator_OperatorType_OP_MERGE_GCONV;
  static constexpr OperatorType OP_CONSTANT_IMM =
    Operator_OperatorType_OP_CONSTANT_IMM;
  static constexpr OperatorType OP_CONSTANT_ICONV =
    Operator_OperatorType_OP_CONSTANT_ICONV;
  static constexpr OperatorType OP_CONSTANT_ONE =
    Operator_OperatorType_OP_CONSTANT_ONE;
  static constexpr OperatorType OP_CONSTANT_POOL =
    Operator_OperatorType_OP_CONSTANT_POOL;
  static constexpr OperatorType OP_SQUEEZE =
    Operator_OperatorType_OP_SQUEEZE;
  static constexpr OperatorType OP_UNSQUEEZE =
    Operator_OperatorType_OP_UNSQUEEZE;
  static constexpr OperatorType OP_EW_SUB =
    Operator_OperatorType_OP_EW_SUB;
  static constexpr OperatorType OP_EW_DIV =
    Operator_OperatorType_OP_EW_DIV;
  static constexpr OperatorType OP_EW_EQUAL =
    Operator_OperatorType_OP_EW_EQUAL;
  static constexpr OperatorType OP_EW_GREATER =
    Operator_OperatorType_OP_EW_GREATER;
  static constexpr OperatorType OP_EW_LESS =
    Operator_OperatorType_OP_EW_LESS;
  static constexpr OperatorType OP_EW_MAX =
    Operator_OperatorType_OP_EW_MAX;
  static constexpr OperatorType OP_EW_MIN =
    Operator_OperatorType_OP_EW_MIN;
  static constexpr OperatorType OP_REDUCE_ARGMAX =
    Operator_OperatorType_OP_REDUCE_ARGMAX;
  static constexpr OperatorType OP_REDUCE_ARGMIN =
    Operator_OperatorType_OP_REDUCE_ARGMIN;
  static constexpr OperatorType OP_REDUCE_MAX =
    Operator_OperatorType_OP_REDUCE_MAX;
  static constexpr OperatorType OP_REDUCE_MEAN =
    Operator_OperatorType_OP_REDUCE_MEAN;
  static constexpr OperatorType OP_REDUCE_MIN =
    Operator_OperatorType_OP_REDUCE_MIN;
  static constexpr OperatorType OP_REDUCE_PROD =
    Operator_OperatorType_OP_REDUCE_PROD;
  static constexpr OperatorType OP_REDUCE_SUM =
    Operator_OperatorType_OP_REDUCE_SUM;
  static constexpr OperatorType OP_PAD =
    Operator_OperatorType_OP_PAD;
  static constexpr OperatorType OP_SHAPE =
    Operator_OperatorType_OP_SHAPE;
  static constexpr OperatorType OP_SIZE =
    Operator_OperatorType_OP_SIZE;
  static constexpr OperatorType OP_TOPK =
    Operator_OperatorType_OP_TOPK;
  static constexpr OperatorType OP_WHERE =
    Operator_OperatorType_OP_WHERE;
  static constexpr OperatorType OP_CEIL =
    Operator_OperatorType_OP_CEIL;
  static constexpr OperatorType OP_CAST =
    Operator_OperatorType_OP_CAST;
  static constexpr OperatorType OP_EXP =
    Operator_OperatorType_OP_EXP;
  static constexpr OperatorType OP_ROUND =
    Operator_OperatorType_OP_ROUND;
  static constexpr OperatorType OP_LOG =
    Operator_OperatorType_OP_LOG;
  static constexpr OperatorType OP_LOGICAL_NOT =
    Operator_OperatorType_OP_LOGICAL_NOT;
  static constexpr OperatorType OP_SQRT =
    Operator_OperatorType_OP_SQRT;
  static constexpr OperatorType OP_LEAKYRELU =
    Operator_OperatorType_OP_LEAKYRELU;
  static constexpr OperatorType OP_SLICE =
    Operator_OperatorType_OP_SLICE;
  static constexpr OperatorType OP_RESIZE =
    Operator_OperatorType_OP_RESIZE;
  static constexpr OperatorType OP_PRELU =
    Operator_OperatorType_OP_PRELU;
  static inline bool OperatorType_IsValid(int value) {
    return Operator_OperatorType_IsValid(value);
  }
  static constexpr OperatorType OperatorType_MIN =
    Operator_OperatorType_OperatorType_MIN;
  static constexpr OperatorType OperatorType_MAX =
    Operator_OperatorType_OperatorType_MAX;
  static constexpr int OperatorType_ARRAYSIZE =
    Operator_OperatorType_OperatorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperatorType_descriptor() {
    return Operator_OperatorType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperatorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperatorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperatorType_Name.");
    return Operator_OperatorType_Name(enum_t_value);
  }
  static inline bool OperatorType_Parse(const std::string& name,
      OperatorType* value) {
    return Operator_OperatorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kOpidFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint64 opid = 1;
  bool has_opid() const;
  private:
  bool _internal_has_opid() const;
  public:
  void clear_opid();
  ::PROTOBUF_NAMESPACE_ID::uint64 opid() const;
  void set_opid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opid() const;
  void _internal_set_opid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .TaskGraphProtoBuf.Operator.OperatorType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TaskGraphProtoBuf::Operator_OperatorType type() const;
  void set_type(::TaskGraphProtoBuf::Operator_OperatorType value);
  private:
  ::TaskGraphProtoBuf::Operator_OperatorType _internal_type() const;
  void _internal_set_type(::TaskGraphProtoBuf::Operator_OperatorType value);
  public:

  // @@protoc_insertion_point(class_scope:TaskGraphProtoBuf.Operator)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opid_;
  int type_;
  friend struct ::TableStruct_taskgraph_2eproto;
};
// -------------------------------------------------------------------

class Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskGraphProtoBuf.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskGraphProtoBuf.Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_taskgraph_2eproto);
    return ::descriptor_table_taskgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Task_SimTaskType SimTaskType;
  static constexpr SimTaskType TASK_FORWARD =
    Task_SimTaskType_TASK_FORWARD;
  static constexpr SimTaskType TASK_BACKWARD =
    Task_SimTaskType_TASK_BACKWARD;
  static constexpr SimTaskType TASK_COMM =
    Task_SimTaskType_TASK_COMM;
  static constexpr SimTaskType TASK_UPDATE =
    Task_SimTaskType_TASK_UPDATE;
  static constexpr SimTaskType TASK_BARRIER =
    Task_SimTaskType_TASK_BARRIER;
  static constexpr SimTaskType TASK_LATENCY =
    Task_SimTaskType_TASK_LATENCY;
  static constexpr SimTaskType TASK_ALLREDUCE =
    Task_SimTaskType_TASK_ALLREDUCE;
  static inline bool SimTaskType_IsValid(int value) {
    return Task_SimTaskType_IsValid(value);
  }
  static constexpr SimTaskType SimTaskType_MIN =
    Task_SimTaskType_SimTaskType_MIN;
  static constexpr SimTaskType SimTaskType_MAX =
    Task_SimTaskType_SimTaskType_MAX;
  static constexpr int SimTaskType_ARRAYSIZE =
    Task_SimTaskType_SimTaskType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SimTaskType_descriptor() {
    return Task_SimTaskType_descriptor();
  }
  template<typename T>
  static inline const std::string& SimTaskType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SimTaskType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SimTaskType_Name.");
    return Task_SimTaskType_Name(enum_t_value);
  }
  static inline bool SimTaskType_Parse(const std::string& name,
      SimTaskType* value) {
    return Task_SimTaskType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNexttasksFieldNumber = 7,
    kArgroupFieldNumber = 8,
    kTaskidFieldNumber = 2,
    kDeviceidFieldNumber = 3,
    kTypeFieldNumber = 1,
    kRuntimeFieldNumber = 5,
    kOpidFieldNumber = 4,
    kXfersizeFieldNumber = 6,
  };
  // repeated uint64 nexttasks = 7 [packed = true];
  int nexttasks_size() const;
  private:
  int _internal_nexttasks_size() const;
  public:
  void clear_nexttasks();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nexttasks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_nexttasks() const;
  void _internal_add_nexttasks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_nexttasks();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 nexttasks(int index) const;
  void set_nexttasks(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_nexttasks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      nexttasks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_nexttasks();

  // repeated uint64 argroup = 8 [packed = true];
  int argroup_size() const;
  private:
  int _internal_argroup_size() const;
  public:
  void clear_argroup();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_argroup(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_argroup() const;
  void _internal_add_argroup(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_argroup();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 argroup(int index) const;
  void set_argroup(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_argroup(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      argroup() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_argroup();

  // required uint64 taskid = 2;
  bool has_taskid() const;
  private:
  bool _internal_has_taskid() const;
  public:
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::uint64 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 deviceid = 3;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .TaskGraphProtoBuf.Task.SimTaskType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TaskGraphProtoBuf::Task_SimTaskType type() const;
  void set_type(::TaskGraphProtoBuf::Task_SimTaskType value);
  private:
  ::TaskGraphProtoBuf::Task_SimTaskType _internal_type() const;
  void _internal_set_type(::TaskGraphProtoBuf::Task_SimTaskType value);
  public:

  // optional float runtime = 5;
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  float runtime() const;
  void set_runtime(float value);
  private:
  float _internal_runtime() const;
  void _internal_set_runtime(float value);
  public:

  // optional uint64 opid = 4;
  bool has_opid() const;
  private:
  bool _internal_has_opid() const;
  public:
  void clear_opid();
  ::PROTOBUF_NAMESPACE_ID::uint64 opid() const;
  void set_opid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opid() const;
  void _internal_set_opid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 xfersize = 6 [default = 0];
  bool has_xfersize() const;
  private:
  bool _internal_has_xfersize() const;
  public:
  void clear_xfersize();
  ::PROTOBUF_NAMESPACE_ID::uint64 xfersize() const;
  void set_xfersize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_xfersize() const;
  void _internal_set_xfersize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TaskGraphProtoBuf.Task)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > nexttasks_;
  mutable std::atomic<int> _nexttasks_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > argroup_;
  mutable std::atomic<int> _argroup_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 taskid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 deviceid_;
  int type_;
  float runtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 xfersize_;
  friend struct ::TableStruct_taskgraph_2eproto;
};
// -------------------------------------------------------------------

class Device :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskGraphProtoBuf.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskGraphProtoBuf.Device";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_taskgraph_2eproto);
    return ::descriptor_table_taskgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Device_DeviceType DeviceType;
  static constexpr DeviceType DEVICE_GPU =
    Device_DeviceType_DEVICE_GPU;
  static constexpr DeviceType DEVICE_CPU =
    Device_DeviceType_DEVICE_CPU;
  static constexpr DeviceType DEVICE_GPU_COMM =
    Device_DeviceType_DEVICE_GPU_COMM;
  static constexpr DeviceType DEVICE_DRAM_COMM =
    Device_DeviceType_DEVICE_DRAM_COMM;
  static constexpr DeviceType DEVICE_NW_COMM =
    Device_DeviceType_DEVICE_NW_COMM;
  static inline bool DeviceType_IsValid(int value) {
    return Device_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    Device_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    Device_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceType_descriptor() {
    return Device_DeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return Device_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(const std::string& name,
      DeviceType* value) {
    return Device_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceidFieldNumber = 2,
    kTypeFieldNumber = 1,
    kNodeidFieldNumber = 3,
    kBandwidthFieldNumber = 5,
    kGpuidFieldNumber = 4,
    kFromgpuFieldNumber = 6,
    kTogpuFieldNumber = 7,
    kFromnodeFieldNumber = 8,
    kTonodeFieldNumber = 9,
  };
  // required uint64 deviceid = 2;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .TaskGraphProtoBuf.Device.DeviceType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TaskGraphProtoBuf::Device_DeviceType type() const;
  void set_type(::TaskGraphProtoBuf::Device_DeviceType value);
  private:
  ::TaskGraphProtoBuf::Device_DeviceType _internal_type() const;
  void _internal_set_type(::TaskGraphProtoBuf::Device_DeviceType value);
  public:

  // optional uint32 nodeid = 3 [default = 0];
  bool has_nodeid() const;
  private:
  bool _internal_has_nodeid() const;
  public:
  void clear_nodeid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeid() const;
  void set_nodeid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nodeid() const;
  void _internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 bandwidth = 5 [default = 0];
  bool has_bandwidth() const;
  private:
  bool _internal_has_bandwidth() const;
  public:
  void clear_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::uint64 bandwidth() const;
  void set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bandwidth() const;
  void _internal_set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 gpuid = 4 [default = 0];
  bool has_gpuid() const;
  private:
  bool _internal_has_gpuid() const;
  public:
  void clear_gpuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpuid() const;
  void set_gpuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpuid() const;
  void _internal_set_gpuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fromgpu = 6 [default = 0];
  bool has_fromgpu() const;
  private:
  bool _internal_has_fromgpu() const;
  public:
  void clear_fromgpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 fromgpu() const;
  void set_fromgpu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fromgpu() const;
  void _internal_set_fromgpu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 togpu = 7 [default = 0];
  bool has_togpu() const;
  private:
  bool _internal_has_togpu() const;
  public:
  void clear_togpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 togpu() const;
  void set_togpu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_togpu() const;
  void _internal_set_togpu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fromnode = 8 [default = 0];
  bool has_fromnode() const;
  private:
  bool _internal_has_fromnode() const;
  public:
  void clear_fromnode();
  ::PROTOBUF_NAMESPACE_ID::uint32 fromnode() const;
  void set_fromnode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fromnode() const;
  void _internal_set_fromnode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tonode = 9 [default = 0];
  bool has_tonode() const;
  private:
  bool _internal_has_tonode() const;
  public:
  void clear_tonode();
  ::PROTOBUF_NAMESPACE_ID::uint32 tonode() const;
  void set_tonode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tonode() const;
  void _internal_set_tonode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TaskGraphProtoBuf.Device)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 deviceid_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fromgpu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 togpu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fromnode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tonode_;
  friend struct ::TableStruct_taskgraph_2eproto;
};
// -------------------------------------------------------------------

class Connection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskGraphProtoBuf.Connection) */ {
 public:
  Connection();
  virtual ~Connection();

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const final {
    return CreateMaybeMessage<Connection>(nullptr);
  }

  Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskGraphProtoBuf.Connection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_taskgraph_2eproto);
    return ::descriptor_table_taskgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kNconnFieldNumber = 3,
  };
  // required uint32 from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nconn = 3;
  bool has_nconn() const;
  private:
  bool _internal_has_nconn() const;
  public:
  void clear_nconn();
  ::PROTOBUF_NAMESPACE_ID::uint32 nconn() const;
  void set_nconn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nconn() const;
  void _internal_set_nconn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TaskGraphProtoBuf.Connection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nconn_;
  friend struct ::TableStruct_taskgraph_2eproto;
};
// -------------------------------------------------------------------

class Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskGraphProtoBuf.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskGraphProtoBuf.Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_taskgraph_2eproto);
    return ::descriptor_table_taskgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHopnodeFieldNumber = 1,
  };
  // repeated uint32 hopnode = 1 [packed = true];
  int hopnode_size() const;
  private:
  int _internal_hopnode_size() const;
  public:
  void clear_hopnode();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hopnode(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_hopnode() const;
  void _internal_add_hopnode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_hopnode();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 hopnode(int index) const;
  void set_hopnode(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_hopnode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      hopnode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_hopnode();

  // @@protoc_insertion_point(class_scope:TaskGraphProtoBuf.Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > hopnode_;
  mutable std::atomic<int> _hopnode_cached_byte_size_;
  friend struct ::TableStruct_taskgraph_2eproto;
};
// -------------------------------------------------------------------

class Route :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskGraphProtoBuf.Route) */ {
 public:
  Route();
  virtual ~Route();

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const final {
    return CreateMaybeMessage<Route>(nullptr);
  }

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskGraphProtoBuf.Route";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_taskgraph_2eproto);
    return ::descriptor_table_taskgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 3,
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // repeated .TaskGraphProtoBuf.Path paths = 3;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::TaskGraphProtoBuf::Path* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Path >*
      mutable_paths();
  private:
  const ::TaskGraphProtoBuf::Path& _internal_paths(int index) const;
  ::TaskGraphProtoBuf::Path* _internal_add_paths();
  public:
  const ::TaskGraphProtoBuf::Path& paths(int index) const;
  ::TaskGraphProtoBuf::Path* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Path >&
      paths() const;

  // required uint32 from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TaskGraphProtoBuf.Route)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Path > paths_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  friend struct ::TableStruct_taskgraph_2eproto;
};
// -------------------------------------------------------------------

class TaskGraph :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskGraphProtoBuf.TaskGraph) */ {
 public:
  TaskGraph();
  virtual ~TaskGraph();

  TaskGraph(const TaskGraph& from);
  TaskGraph(TaskGraph&& from) noexcept
    : TaskGraph() {
    *this = ::std::move(from);
  }

  inline TaskGraph& operator=(const TaskGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskGraph& operator=(TaskGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskGraph* internal_default_instance() {
    return reinterpret_cast<const TaskGraph*>(
               &_TaskGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TaskGraph& a, TaskGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskGraph* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskGraph* New() const final {
    return CreateMaybeMessage<TaskGraph>(nullptr);
  }

  TaskGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskGraph& from);
  void MergeFrom(const TaskGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskGraphProtoBuf.TaskGraph";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_taskgraph_2eproto);
    return ::descriptor_table_taskgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnFieldNumber = 6,
    kOpsFieldNumber = 7,
    kTasksFieldNumber = 8,
    kDevicesFieldNumber = 9,
    kRoutesFieldNumber = 10,
    kNGPUPerNodeFieldNumber = 1,
    kNNodeFieldNumber = 2,
    kInterGPUBWFieldNumber = 3,
    kDramBWFieldNumber = 4,
    kNetBWFieldNumber = 5,
  };
  // repeated .TaskGraphProtoBuf.Connection conn = 6;
  int conn_size() const;
  private:
  int _internal_conn_size() const;
  public:
  void clear_conn();
  ::TaskGraphProtoBuf::Connection* mutable_conn(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection >*
      mutable_conn();
  private:
  const ::TaskGraphProtoBuf::Connection& _internal_conn(int index) const;
  ::TaskGraphProtoBuf::Connection* _internal_add_conn();
  public:
  const ::TaskGraphProtoBuf::Connection& conn(int index) const;
  ::TaskGraphProtoBuf::Connection* add_conn();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection >&
      conn() const;

  // repeated .TaskGraphProtoBuf.Operator ops = 7;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::TaskGraphProtoBuf::Operator* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Operator >*
      mutable_ops();
  private:
  const ::TaskGraphProtoBuf::Operator& _internal_ops(int index) const;
  ::TaskGraphProtoBuf::Operator* _internal_add_ops();
  public:
  const ::TaskGraphProtoBuf::Operator& ops(int index) const;
  ::TaskGraphProtoBuf::Operator* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Operator >&
      ops() const;

  // repeated .TaskGraphProtoBuf.Task tasks = 8;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::TaskGraphProtoBuf::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Task >*
      mutable_tasks();
  private:
  const ::TaskGraphProtoBuf::Task& _internal_tasks(int index) const;
  ::TaskGraphProtoBuf::Task* _internal_add_tasks();
  public:
  const ::TaskGraphProtoBuf::Task& tasks(int index) const;
  ::TaskGraphProtoBuf::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Task >&
      tasks() const;

  // repeated .TaskGraphProtoBuf.Device devices = 9;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::TaskGraphProtoBuf::Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Device >*
      mutable_devices();
  private:
  const ::TaskGraphProtoBuf::Device& _internal_devices(int index) const;
  ::TaskGraphProtoBuf::Device* _internal_add_devices();
  public:
  const ::TaskGraphProtoBuf::Device& devices(int index) const;
  ::TaskGraphProtoBuf::Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Device >&
      devices() const;

  // repeated .TaskGraphProtoBuf.Route routes = 10;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::TaskGraphProtoBuf::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route >*
      mutable_routes();
  private:
  const ::TaskGraphProtoBuf::Route& _internal_routes(int index) const;
  ::TaskGraphProtoBuf::Route* _internal_add_routes();
  public:
  const ::TaskGraphProtoBuf::Route& routes(int index) const;
  ::TaskGraphProtoBuf::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route >&
      routes() const;

  // required uint32 nGPUPerNode = 1;
  bool has_ngpupernode() const;
  private:
  bool _internal_has_ngpupernode() const;
  public:
  void clear_ngpupernode();
  ::PROTOBUF_NAMESPACE_ID::uint32 ngpupernode() const;
  void set_ngpupernode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ngpupernode() const;
  void _internal_set_ngpupernode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nNode = 2;
  bool has_nnode() const;
  private:
  bool _internal_has_nnode() const;
  public:
  void clear_nnode();
  ::PROTOBUF_NAMESPACE_ID::uint32 nnode() const;
  void set_nnode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nnode() const;
  void _internal_set_nnode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float interGPUBW = 3;
  bool has_intergpubw() const;
  private:
  bool _internal_has_intergpubw() const;
  public:
  void clear_intergpubw();
  float intergpubw() const;
  void set_intergpubw(float value);
  private:
  float _internal_intergpubw() const;
  void _internal_set_intergpubw(float value);
  public:

  // required float dramBW = 4;
  bool has_drambw() const;
  private:
  bool _internal_has_drambw() const;
  public:
  void clear_drambw();
  float drambw() const;
  void set_drambw(float value);
  private:
  float _internal_drambw() const;
  void _internal_set_drambw(float value);
  public:

  // required float netBW = 5;
  bool has_netbw() const;
  private:
  bool _internal_has_netbw() const;
  public:
  void clear_netbw();
  float netbw() const;
  void set_netbw(float value);
  private:
  float _internal_netbw() const;
  void _internal_set_netbw(float value);
  public:

  // @@protoc_insertion_point(class_scope:TaskGraphProtoBuf.TaskGraph)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection > conn_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Operator > ops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Device > devices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route > routes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ngpupernode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nnode_;
  float intergpubw_;
  float drambw_;
  float netbw_;
  friend struct ::TableStruct_taskgraph_2eproto;
};
// -------------------------------------------------------------------

class Topology :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskGraphProtoBuf.Topology) */ {
 public:
  Topology();
  virtual ~Topology();

  Topology(const Topology& from);
  Topology(Topology&& from) noexcept
    : Topology() {
    *this = ::std::move(from);
  }

  inline Topology& operator=(const Topology& from) {
    CopyFrom(from);
    return *this;
  }
  inline Topology& operator=(Topology&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Topology& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Topology* internal_default_instance() {
    return reinterpret_cast<const Topology*>(
               &_Topology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Topology& a, Topology& b) {
    a.Swap(&b);
  }
  inline void Swap(Topology* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Topology* New() const final {
    return CreateMaybeMessage<Topology>(nullptr);
  }

  Topology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Topology>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Topology& from);
  void MergeFrom(const Topology& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Topology* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskGraphProtoBuf.Topology";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_taskgraph_2eproto);
    return ::descriptor_table_taskgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnFieldNumber = 2,
    kRoutesFieldNumber = 3,
    kNetBWFieldNumber = 1,
  };
  // repeated .TaskGraphProtoBuf.Connection conn = 2;
  int conn_size() const;
  private:
  int _internal_conn_size() const;
  public:
  void clear_conn();
  ::TaskGraphProtoBuf::Connection* mutable_conn(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection >*
      mutable_conn();
  private:
  const ::TaskGraphProtoBuf::Connection& _internal_conn(int index) const;
  ::TaskGraphProtoBuf::Connection* _internal_add_conn();
  public:
  const ::TaskGraphProtoBuf::Connection& conn(int index) const;
  ::TaskGraphProtoBuf::Connection* add_conn();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection >&
      conn() const;

  // repeated .TaskGraphProtoBuf.Route routes = 3;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::TaskGraphProtoBuf::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route >*
      mutable_routes();
  private:
  const ::TaskGraphProtoBuf::Route& _internal_routes(int index) const;
  ::TaskGraphProtoBuf::Route* _internal_add_routes();
  public:
  const ::TaskGraphProtoBuf::Route& routes(int index) const;
  ::TaskGraphProtoBuf::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route >&
      routes() const;

  // required float netBW = 1;
  bool has_netbw() const;
  private:
  bool _internal_has_netbw() const;
  public:
  void clear_netbw();
  float netbw() const;
  void set_netbw(float value);
  private:
  float _internal_netbw() const;
  void _internal_set_netbw(float value);
  public:

  // @@protoc_insertion_point(class_scope:TaskGraphProtoBuf.Topology)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection > conn_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route > routes_;
  float netbw_;
  friend struct ::TableStruct_taskgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Operator

// required uint64 opid = 1;
inline bool Operator::_internal_has_opid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Operator::has_opid() const {
  return _internal_has_opid();
}
inline void Operator::clear_opid() {
  opid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Operator::_internal_opid() const {
  return opid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Operator::opid() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Operator.opid)
  return _internal_opid();
}
inline void Operator::_internal_set_opid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  opid_ = value;
}
inline void Operator::set_opid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opid(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Operator.opid)
}

// required .TaskGraphProtoBuf.Operator.OperatorType type = 2;
inline bool Operator::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Operator::has_type() const {
  return _internal_has_type();
}
inline void Operator::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TaskGraphProtoBuf::Operator_OperatorType Operator::_internal_type() const {
  return static_cast< ::TaskGraphProtoBuf::Operator_OperatorType >(type_);
}
inline ::TaskGraphProtoBuf::Operator_OperatorType Operator::type() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Operator.type)
  return _internal_type();
}
inline void Operator::_internal_set_type(::TaskGraphProtoBuf::Operator_OperatorType value) {
  assert(::TaskGraphProtoBuf::Operator_OperatorType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Operator::set_type(::TaskGraphProtoBuf::Operator_OperatorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Operator.type)
}

// required string name = 3;
inline bool Operator::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operator::has_name() const {
  return _internal_has_name();
}
inline void Operator::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operator::name() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Operator.name)
  return _internal_name();
}
inline void Operator::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Operator.name)
}
inline std::string* Operator::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.Operator.name)
  return _internal_mutable_name();
}
inline const std::string& Operator::_internal_name() const {
  return name_.GetNoArena();
}
inline void Operator::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Operator::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TaskGraphProtoBuf.Operator.name)
}
inline void Operator::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskGraphProtoBuf.Operator.name)
}
inline void Operator::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskGraphProtoBuf.Operator.name)
}
inline std::string* Operator::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operator::release_name() {
  // @@protoc_insertion_point(field_release:TaskGraphProtoBuf.Operator.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operator::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TaskGraphProtoBuf.Operator.name)
}

// -------------------------------------------------------------------

// Task

// required .TaskGraphProtoBuf.Task.SimTaskType type = 1;
inline bool Task::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Task::has_type() const {
  return _internal_has_type();
}
inline void Task::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TaskGraphProtoBuf::Task_SimTaskType Task::_internal_type() const {
  return static_cast< ::TaskGraphProtoBuf::Task_SimTaskType >(type_);
}
inline ::TaskGraphProtoBuf::Task_SimTaskType Task::type() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Task.type)
  return _internal_type();
}
inline void Task::_internal_set_type(::TaskGraphProtoBuf::Task_SimTaskType value) {
  assert(::TaskGraphProtoBuf::Task_SimTaskType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Task::set_type(::TaskGraphProtoBuf::Task_SimTaskType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Task.type)
}

// required uint64 taskid = 2;
inline bool Task::_internal_has_taskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Task::has_taskid() const {
  return _internal_has_taskid();
}
inline void Task::clear_taskid() {
  taskid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::taskid() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Task.taskid)
  return _internal_taskid();
}
inline void Task::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  taskid_ = value;
}
inline void Task::set_taskid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Task.taskid)
}

// optional uint64 deviceid = 3;
inline bool Task::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Task::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void Task::clear_deviceid() {
  deviceid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::deviceid() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Task.deviceid)
  return _internal_deviceid();
}
inline void Task::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  deviceid_ = value;
}
inline void Task::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Task.deviceid)
}

// optional uint64 opid = 4;
inline bool Task::_internal_has_opid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Task::has_opid() const {
  return _internal_has_opid();
}
inline void Task::clear_opid() {
  opid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::_internal_opid() const {
  return opid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::opid() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Task.opid)
  return _internal_opid();
}
inline void Task::_internal_set_opid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  opid_ = value;
}
inline void Task::set_opid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opid(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Task.opid)
}

// optional float runtime = 5;
inline bool Task::_internal_has_runtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Task::has_runtime() const {
  return _internal_has_runtime();
}
inline void Task::clear_runtime() {
  runtime_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Task::_internal_runtime() const {
  return runtime_;
}
inline float Task::runtime() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Task.runtime)
  return _internal_runtime();
}
inline void Task::_internal_set_runtime(float value) {
  _has_bits_[0] |= 0x00000008u;
  runtime_ = value;
}
inline void Task::set_runtime(float value) {
  _internal_set_runtime(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Task.runtime)
}

// optional uint64 xfersize = 6 [default = 0];
inline bool Task::_internal_has_xfersize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Task::has_xfersize() const {
  return _internal_has_xfersize();
}
inline void Task::clear_xfersize() {
  xfersize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::_internal_xfersize() const {
  return xfersize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::xfersize() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Task.xfersize)
  return _internal_xfersize();
}
inline void Task::_internal_set_xfersize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  xfersize_ = value;
}
inline void Task::set_xfersize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_xfersize(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Task.xfersize)
}

// repeated uint64 nexttasks = 7 [packed = true];
inline int Task::_internal_nexttasks_size() const {
  return nexttasks_.size();
}
inline int Task::nexttasks_size() const {
  return _internal_nexttasks_size();
}
inline void Task::clear_nexttasks() {
  nexttasks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::_internal_nexttasks(int index) const {
  return nexttasks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::nexttasks(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Task.nexttasks)
  return _internal_nexttasks(index);
}
inline void Task::set_nexttasks(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  nexttasks_.Set(index, value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Task.nexttasks)
}
inline void Task::_internal_add_nexttasks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  nexttasks_.Add(value);
}
inline void Task::add_nexttasks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_nexttasks(value);
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.Task.nexttasks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Task::_internal_nexttasks() const {
  return nexttasks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Task::nexttasks() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.Task.nexttasks)
  return _internal_nexttasks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Task::_internal_mutable_nexttasks() {
  return &nexttasks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Task::mutable_nexttasks() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.Task.nexttasks)
  return _internal_mutable_nexttasks();
}

// repeated uint64 argroup = 8 [packed = true];
inline int Task::_internal_argroup_size() const {
  return argroup_.size();
}
inline int Task::argroup_size() const {
  return _internal_argroup_size();
}
inline void Task::clear_argroup() {
  argroup_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::_internal_argroup(int index) const {
  return argroup_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Task::argroup(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Task.argroup)
  return _internal_argroup(index);
}
inline void Task::set_argroup(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  argroup_.Set(index, value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Task.argroup)
}
inline void Task::_internal_add_argroup(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  argroup_.Add(value);
}
inline void Task::add_argroup(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_argroup(value);
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.Task.argroup)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Task::_internal_argroup() const {
  return argroup_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Task::argroup() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.Task.argroup)
  return _internal_argroup();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Task::_internal_mutable_argroup() {
  return &argroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Task::mutable_argroup() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.Task.argroup)
  return _internal_mutable_argroup();
}

// -------------------------------------------------------------------

// Device

// required .TaskGraphProtoBuf.Device.DeviceType type = 1;
inline bool Device::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Device::has_type() const {
  return _internal_has_type();
}
inline void Device::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TaskGraphProtoBuf::Device_DeviceType Device::_internal_type() const {
  return static_cast< ::TaskGraphProtoBuf::Device_DeviceType >(type_);
}
inline ::TaskGraphProtoBuf::Device_DeviceType Device::type() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.type)
  return _internal_type();
}
inline void Device::_internal_set_type(::TaskGraphProtoBuf::Device_DeviceType value) {
  assert(::TaskGraphProtoBuf::Device_DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Device::set_type(::TaskGraphProtoBuf::Device_DeviceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.type)
}

// required uint64 deviceid = 2;
inline bool Device::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Device::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void Device::clear_deviceid() {
  deviceid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Device::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Device::deviceid() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.deviceid)
  return _internal_deviceid();
}
inline void Device::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  deviceid_ = value;
}
inline void Device::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.deviceid)
}

// optional uint32 nodeid = 3 [default = 0];
inline bool Device::_internal_has_nodeid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Device::has_nodeid() const {
  return _internal_has_nodeid();
}
inline void Device::clear_nodeid() {
  nodeid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_nodeid() const {
  return nodeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::nodeid() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.nodeid)
  return _internal_nodeid();
}
inline void Device::_internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nodeid_ = value;
}
inline void Device::set_nodeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.nodeid)
}

// optional uint32 gpuid = 4 [default = 0];
inline bool Device::_internal_has_gpuid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Device::has_gpuid() const {
  return _internal_has_gpuid();
}
inline void Device::clear_gpuid() {
  gpuid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_gpuid() const {
  return gpuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::gpuid() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.gpuid)
  return _internal_gpuid();
}
inline void Device::_internal_set_gpuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  gpuid_ = value;
}
inline void Device::set_gpuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpuid(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.gpuid)
}

// optional uint64 bandwidth = 5 [default = 0];
inline bool Device::_internal_has_bandwidth() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Device::has_bandwidth() const {
  return _internal_has_bandwidth();
}
inline void Device::clear_bandwidth() {
  bandwidth_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Device::_internal_bandwidth() const {
  return bandwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Device::bandwidth() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.bandwidth)
  return _internal_bandwidth();
}
inline void Device::_internal_set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  bandwidth_ = value;
}
inline void Device::set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.bandwidth)
}

// optional uint32 fromgpu = 6 [default = 0];
inline bool Device::_internal_has_fromgpu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Device::has_fromgpu() const {
  return _internal_has_fromgpu();
}
inline void Device::clear_fromgpu() {
  fromgpu_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_fromgpu() const {
  return fromgpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::fromgpu() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.fromgpu)
  return _internal_fromgpu();
}
inline void Device::_internal_set_fromgpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  fromgpu_ = value;
}
inline void Device::set_fromgpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fromgpu(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.fromgpu)
}

// optional uint32 togpu = 7 [default = 0];
inline bool Device::_internal_has_togpu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Device::has_togpu() const {
  return _internal_has_togpu();
}
inline void Device::clear_togpu() {
  togpu_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_togpu() const {
  return togpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::togpu() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.togpu)
  return _internal_togpu();
}
inline void Device::_internal_set_togpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  togpu_ = value;
}
inline void Device::set_togpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_togpu(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.togpu)
}

// optional uint32 fromnode = 8 [default = 0];
inline bool Device::_internal_has_fromnode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Device::has_fromnode() const {
  return _internal_has_fromnode();
}
inline void Device::clear_fromnode() {
  fromnode_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_fromnode() const {
  return fromnode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::fromnode() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.fromnode)
  return _internal_fromnode();
}
inline void Device::_internal_set_fromnode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  fromnode_ = value;
}
inline void Device::set_fromnode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fromnode(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.fromnode)
}

// optional uint32 tonode = 9 [default = 0];
inline bool Device::_internal_has_tonode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Device::has_tonode() const {
  return _internal_has_tonode();
}
inline void Device::clear_tonode() {
  tonode_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_tonode() const {
  return tonode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::tonode() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Device.tonode)
  return _internal_tonode();
}
inline void Device::_internal_set_tonode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  tonode_ = value;
}
inline void Device::set_tonode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tonode(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Device.tonode)
}

// -------------------------------------------------------------------

// Connection

// required uint32 from = 1;
inline bool Connection::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Connection::has_from() const {
  return _internal_has_from();
}
inline void Connection::clear_from() {
  from_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Connection::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Connection::from() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Connection.from)
  return _internal_from();
}
inline void Connection::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  from_ = value;
}
inline void Connection::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Connection.from)
}

// required uint32 to = 2;
inline bool Connection::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Connection::has_to() const {
  return _internal_has_to();
}
inline void Connection::clear_to() {
  to_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Connection::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Connection::to() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Connection.to)
  return _internal_to();
}
inline void Connection::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  to_ = value;
}
inline void Connection::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Connection.to)
}

// required uint32 nconn = 3;
inline bool Connection::_internal_has_nconn() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Connection::has_nconn() const {
  return _internal_has_nconn();
}
inline void Connection::clear_nconn() {
  nconn_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Connection::_internal_nconn() const {
  return nconn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Connection::nconn() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Connection.nconn)
  return _internal_nconn();
}
inline void Connection::_internal_set_nconn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nconn_ = value;
}
inline void Connection::set_nconn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nconn(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Connection.nconn)
}

// -------------------------------------------------------------------

// Path

// repeated uint32 hopnode = 1 [packed = true];
inline int Path::_internal_hopnode_size() const {
  return hopnode_.size();
}
inline int Path::hopnode_size() const {
  return _internal_hopnode_size();
}
inline void Path::clear_hopnode() {
  hopnode_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::_internal_hopnode(int index) const {
  return hopnode_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::hopnode(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Path.hopnode)
  return _internal_hopnode(index);
}
inline void Path::set_hopnode(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hopnode_.Set(index, value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Path.hopnode)
}
inline void Path::_internal_add_hopnode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hopnode_.Add(value);
}
inline void Path::add_hopnode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_hopnode(value);
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.Path.hopnode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Path::_internal_hopnode() const {
  return hopnode_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Path::hopnode() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.Path.hopnode)
  return _internal_hopnode();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Path::_internal_mutable_hopnode() {
  return &hopnode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Path::mutable_hopnode() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.Path.hopnode)
  return _internal_mutable_hopnode();
}

// -------------------------------------------------------------------

// Route

// required uint32 from = 1;
inline bool Route::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Route::has_from() const {
  return _internal_has_from();
}
inline void Route::clear_from() {
  from_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::from() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Route.from)
  return _internal_from();
}
inline void Route::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  from_ = value;
}
inline void Route::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Route.from)
}

// required uint32 to = 2;
inline bool Route::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Route::has_to() const {
  return _internal_has_to();
}
inline void Route::clear_to() {
  to_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::to() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Route.to)
  return _internal_to();
}
inline void Route::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  to_ = value;
}
inline void Route::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Route.to)
}

// repeated .TaskGraphProtoBuf.Path paths = 3;
inline int Route::_internal_paths_size() const {
  return paths_.size();
}
inline int Route::paths_size() const {
  return _internal_paths_size();
}
inline void Route::clear_paths() {
  paths_.Clear();
}
inline ::TaskGraphProtoBuf::Path* Route::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.Route.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Path >*
Route::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.Route.paths)
  return &paths_;
}
inline const ::TaskGraphProtoBuf::Path& Route::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::TaskGraphProtoBuf::Path& Route::paths(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Route.paths)
  return _internal_paths(index);
}
inline ::TaskGraphProtoBuf::Path* Route::_internal_add_paths() {
  return paths_.Add();
}
inline ::TaskGraphProtoBuf::Path* Route::add_paths() {
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.Route.paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Path >&
Route::paths() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.Route.paths)
  return paths_;
}

// -------------------------------------------------------------------

// TaskGraph

// required uint32 nGPUPerNode = 1;
inline bool TaskGraph::_internal_has_ngpupernode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskGraph::has_ngpupernode() const {
  return _internal_has_ngpupernode();
}
inline void TaskGraph::clear_ngpupernode() {
  ngpupernode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskGraph::_internal_ngpupernode() const {
  return ngpupernode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskGraph::ngpupernode() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.nGPUPerNode)
  return _internal_ngpupernode();
}
inline void TaskGraph::_internal_set_ngpupernode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ngpupernode_ = value;
}
inline void TaskGraph::set_ngpupernode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ngpupernode(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.TaskGraph.nGPUPerNode)
}

// required uint32 nNode = 2;
inline bool TaskGraph::_internal_has_nnode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskGraph::has_nnode() const {
  return _internal_has_nnode();
}
inline void TaskGraph::clear_nnode() {
  nnode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskGraph::_internal_nnode() const {
  return nnode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskGraph::nnode() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.nNode)
  return _internal_nnode();
}
inline void TaskGraph::_internal_set_nnode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nnode_ = value;
}
inline void TaskGraph::set_nnode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nnode(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.TaskGraph.nNode)
}

// required float interGPUBW = 3;
inline bool TaskGraph::_internal_has_intergpubw() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TaskGraph::has_intergpubw() const {
  return _internal_has_intergpubw();
}
inline void TaskGraph::clear_intergpubw() {
  intergpubw_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TaskGraph::_internal_intergpubw() const {
  return intergpubw_;
}
inline float TaskGraph::intergpubw() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.interGPUBW)
  return _internal_intergpubw();
}
inline void TaskGraph::_internal_set_intergpubw(float value) {
  _has_bits_[0] |= 0x00000004u;
  intergpubw_ = value;
}
inline void TaskGraph::set_intergpubw(float value) {
  _internal_set_intergpubw(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.TaskGraph.interGPUBW)
}

// required float dramBW = 4;
inline bool TaskGraph::_internal_has_drambw() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TaskGraph::has_drambw() const {
  return _internal_has_drambw();
}
inline void TaskGraph::clear_drambw() {
  drambw_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TaskGraph::_internal_drambw() const {
  return drambw_;
}
inline float TaskGraph::drambw() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.dramBW)
  return _internal_drambw();
}
inline void TaskGraph::_internal_set_drambw(float value) {
  _has_bits_[0] |= 0x00000008u;
  drambw_ = value;
}
inline void TaskGraph::set_drambw(float value) {
  _internal_set_drambw(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.TaskGraph.dramBW)
}

// required float netBW = 5;
inline bool TaskGraph::_internal_has_netbw() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TaskGraph::has_netbw() const {
  return _internal_has_netbw();
}
inline void TaskGraph::clear_netbw() {
  netbw_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TaskGraph::_internal_netbw() const {
  return netbw_;
}
inline float TaskGraph::netbw() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.netBW)
  return _internal_netbw();
}
inline void TaskGraph::_internal_set_netbw(float value) {
  _has_bits_[0] |= 0x00000010u;
  netbw_ = value;
}
inline void TaskGraph::set_netbw(float value) {
  _internal_set_netbw(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.TaskGraph.netBW)
}

// repeated .TaskGraphProtoBuf.Connection conn = 6;
inline int TaskGraph::_internal_conn_size() const {
  return conn_.size();
}
inline int TaskGraph::conn_size() const {
  return _internal_conn_size();
}
inline void TaskGraph::clear_conn() {
  conn_.Clear();
}
inline ::TaskGraphProtoBuf::Connection* TaskGraph::mutable_conn(int index) {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.TaskGraph.conn)
  return conn_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection >*
TaskGraph::mutable_conn() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.TaskGraph.conn)
  return &conn_;
}
inline const ::TaskGraphProtoBuf::Connection& TaskGraph::_internal_conn(int index) const {
  return conn_.Get(index);
}
inline const ::TaskGraphProtoBuf::Connection& TaskGraph::conn(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.conn)
  return _internal_conn(index);
}
inline ::TaskGraphProtoBuf::Connection* TaskGraph::_internal_add_conn() {
  return conn_.Add();
}
inline ::TaskGraphProtoBuf::Connection* TaskGraph::add_conn() {
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.TaskGraph.conn)
  return _internal_add_conn();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection >&
TaskGraph::conn() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.TaskGraph.conn)
  return conn_;
}

// repeated .TaskGraphProtoBuf.Operator ops = 7;
inline int TaskGraph::_internal_ops_size() const {
  return ops_.size();
}
inline int TaskGraph::ops_size() const {
  return _internal_ops_size();
}
inline void TaskGraph::clear_ops() {
  ops_.Clear();
}
inline ::TaskGraphProtoBuf::Operator* TaskGraph::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.TaskGraph.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Operator >*
TaskGraph::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.TaskGraph.ops)
  return &ops_;
}
inline const ::TaskGraphProtoBuf::Operator& TaskGraph::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::TaskGraphProtoBuf::Operator& TaskGraph::ops(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.ops)
  return _internal_ops(index);
}
inline ::TaskGraphProtoBuf::Operator* TaskGraph::_internal_add_ops() {
  return ops_.Add();
}
inline ::TaskGraphProtoBuf::Operator* TaskGraph::add_ops() {
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.TaskGraph.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Operator >&
TaskGraph::ops() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.TaskGraph.ops)
  return ops_;
}

// repeated .TaskGraphProtoBuf.Task tasks = 8;
inline int TaskGraph::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TaskGraph::tasks_size() const {
  return _internal_tasks_size();
}
inline void TaskGraph::clear_tasks() {
  tasks_.Clear();
}
inline ::TaskGraphProtoBuf::Task* TaskGraph::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.TaskGraph.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Task >*
TaskGraph::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.TaskGraph.tasks)
  return &tasks_;
}
inline const ::TaskGraphProtoBuf::Task& TaskGraph::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::TaskGraphProtoBuf::Task& TaskGraph::tasks(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.tasks)
  return _internal_tasks(index);
}
inline ::TaskGraphProtoBuf::Task* TaskGraph::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::TaskGraphProtoBuf::Task* TaskGraph::add_tasks() {
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.TaskGraph.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Task >&
TaskGraph::tasks() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.TaskGraph.tasks)
  return tasks_;
}

// repeated .TaskGraphProtoBuf.Device devices = 9;
inline int TaskGraph::_internal_devices_size() const {
  return devices_.size();
}
inline int TaskGraph::devices_size() const {
  return _internal_devices_size();
}
inline void TaskGraph::clear_devices() {
  devices_.Clear();
}
inline ::TaskGraphProtoBuf::Device* TaskGraph::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.TaskGraph.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Device >*
TaskGraph::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.TaskGraph.devices)
  return &devices_;
}
inline const ::TaskGraphProtoBuf::Device& TaskGraph::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::TaskGraphProtoBuf::Device& TaskGraph::devices(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.devices)
  return _internal_devices(index);
}
inline ::TaskGraphProtoBuf::Device* TaskGraph::_internal_add_devices() {
  return devices_.Add();
}
inline ::TaskGraphProtoBuf::Device* TaskGraph::add_devices() {
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.TaskGraph.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Device >&
TaskGraph::devices() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.TaskGraph.devices)
  return devices_;
}

// repeated .TaskGraphProtoBuf.Route routes = 10;
inline int TaskGraph::_internal_routes_size() const {
  return routes_.size();
}
inline int TaskGraph::routes_size() const {
  return _internal_routes_size();
}
inline void TaskGraph::clear_routes() {
  routes_.Clear();
}
inline ::TaskGraphProtoBuf::Route* TaskGraph::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.TaskGraph.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route >*
TaskGraph::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.TaskGraph.routes)
  return &routes_;
}
inline const ::TaskGraphProtoBuf::Route& TaskGraph::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::TaskGraphProtoBuf::Route& TaskGraph::routes(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.TaskGraph.routes)
  return _internal_routes(index);
}
inline ::TaskGraphProtoBuf::Route* TaskGraph::_internal_add_routes() {
  return routes_.Add();
}
inline ::TaskGraphProtoBuf::Route* TaskGraph::add_routes() {
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.TaskGraph.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route >&
TaskGraph::routes() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.TaskGraph.routes)
  return routes_;
}

// -------------------------------------------------------------------

// Topology

// required float netBW = 1;
inline bool Topology::_internal_has_netbw() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Topology::has_netbw() const {
  return _internal_has_netbw();
}
inline void Topology::clear_netbw() {
  netbw_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Topology::_internal_netbw() const {
  return netbw_;
}
inline float Topology::netbw() const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Topology.netBW)
  return _internal_netbw();
}
inline void Topology::_internal_set_netbw(float value) {
  _has_bits_[0] |= 0x00000001u;
  netbw_ = value;
}
inline void Topology::set_netbw(float value) {
  _internal_set_netbw(value);
  // @@protoc_insertion_point(field_set:TaskGraphProtoBuf.Topology.netBW)
}

// repeated .TaskGraphProtoBuf.Connection conn = 2;
inline int Topology::_internal_conn_size() const {
  return conn_.size();
}
inline int Topology::conn_size() const {
  return _internal_conn_size();
}
inline void Topology::clear_conn() {
  conn_.Clear();
}
inline ::TaskGraphProtoBuf::Connection* Topology::mutable_conn(int index) {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.Topology.conn)
  return conn_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection >*
Topology::mutable_conn() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.Topology.conn)
  return &conn_;
}
inline const ::TaskGraphProtoBuf::Connection& Topology::_internal_conn(int index) const {
  return conn_.Get(index);
}
inline const ::TaskGraphProtoBuf::Connection& Topology::conn(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Topology.conn)
  return _internal_conn(index);
}
inline ::TaskGraphProtoBuf::Connection* Topology::_internal_add_conn() {
  return conn_.Add();
}
inline ::TaskGraphProtoBuf::Connection* Topology::add_conn() {
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.Topology.conn)
  return _internal_add_conn();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Connection >&
Topology::conn() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.Topology.conn)
  return conn_;
}

// repeated .TaskGraphProtoBuf.Route routes = 3;
inline int Topology::_internal_routes_size() const {
  return routes_.size();
}
inline int Topology::routes_size() const {
  return _internal_routes_size();
}
inline void Topology::clear_routes() {
  routes_.Clear();
}
inline ::TaskGraphProtoBuf::Route* Topology::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:TaskGraphProtoBuf.Topology.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route >*
Topology::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:TaskGraphProtoBuf.Topology.routes)
  return &routes_;
}
inline const ::TaskGraphProtoBuf::Route& Topology::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::TaskGraphProtoBuf::Route& Topology::routes(int index) const {
  // @@protoc_insertion_point(field_get:TaskGraphProtoBuf.Topology.routes)
  return _internal_routes(index);
}
inline ::TaskGraphProtoBuf::Route* Topology::_internal_add_routes() {
  return routes_.Add();
}
inline ::TaskGraphProtoBuf::Route* Topology::add_routes() {
  // @@protoc_insertion_point(field_add:TaskGraphProtoBuf.Topology.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskGraphProtoBuf::Route >&
Topology::routes() const {
  // @@protoc_insertion_point(field_list:TaskGraphProtoBuf.Topology.routes)
  return routes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TaskGraphProtoBuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TaskGraphProtoBuf::Operator_OperatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskGraphProtoBuf::Operator_OperatorType>() {
  return ::TaskGraphProtoBuf::Operator_OperatorType_descriptor();
}
template <> struct is_proto_enum< ::TaskGraphProtoBuf::Task_SimTaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskGraphProtoBuf::Task_SimTaskType>() {
  return ::TaskGraphProtoBuf::Task_SimTaskType_descriptor();
}
template <> struct is_proto_enum< ::TaskGraphProtoBuf::Device_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskGraphProtoBuf::Device_DeviceType>() {
  return ::TaskGraphProtoBuf::Device_DeviceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_taskgraph_2eproto
